
tftlcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cf4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001e00  08001e00  00011e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e2c  08001e2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e2c  08001e2c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e2c  08001e2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e2c  08001e2c  00011e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e30  08001e30  00011e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08001e40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08001e40  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b64a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e05  00000000  00000000  0002b67f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a08  00000000  00000000  0002d488  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000918  00000000  00000000  0002de90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000185bb  00000000  00000000  0002e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000acf4  00000000  00000000  00046d63  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085bde  00000000  00000000  00051a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7635  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d8  00000000  00000000  000d76b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001de8 	.word	0x08001de8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001de8 	.word	0x08001de8

0800014c <mylogic>:
//	myDelayMS(1500);
//	LCD_LED_CLR;
//	}
}
void mylogic(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
//
//	keypad_init(Pull_Down,4,4);
//
	while(1)
	{
		Test_Demo();
 8000150:	f000 fafc 	bl	800074c <Test_Demo>
 8000154:	e7fc      	b.n	8000150 <mylogic+0x4>
	...

08000158 <myDelayUS>:

extern UART_HandleTypeDef huart2;
static u32 fac_us=0;

void myDelayUS(u32 nus)
{
 8000158:	b480      	push	{r7}
 800015a:	b089      	sub	sp, #36	; 0x24
 800015c:	af00      	add	r7, sp, #0
 800015e:	6078      	str	r0, [r7, #4]
	u32 ticks;
	u32 told,tnow,tcnt=0;
 8000160:	2300      	movs	r3, #0
 8000162:	61bb      	str	r3, [r7, #24]
	u32 reload=SysTick->LOAD;
 8000164:	4b19      	ldr	r3, [pc, #100]	; (80001cc <myDelayUS+0x74>)
 8000166:	685b      	ldr	r3, [r3, #4]
 8000168:	617b      	str	r3, [r7, #20]
	ticks=nus*fac_us;
 800016a:	4b19      	ldr	r3, [pc, #100]	; (80001d0 <myDelayUS+0x78>)
 800016c:	681a      	ldr	r2, [r3, #0]
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	fb02 f303 	mul.w	r3, r2, r3
 8000174:	613b      	str	r3, [r7, #16]
	told=SysTick->VAL;
 8000176:	4b15      	ldr	r3, [pc, #84]	; (80001cc <myDelayUS+0x74>)
 8000178:	689b      	ldr	r3, [r3, #8]
 800017a:	61fb      	str	r3, [r7, #28]
	while(1)
	{
		tnow=SysTick->VAL;
 800017c:	4b13      	ldr	r3, [pc, #76]	; (80001cc <myDelayUS+0x74>)
 800017e:	689b      	ldr	r3, [r3, #8]
 8000180:	60fb      	str	r3, [r7, #12]
		if(tnow!=told)
 8000182:	68fa      	ldr	r2, [r7, #12]
 8000184:	69fb      	ldr	r3, [r7, #28]
 8000186:	429a      	cmp	r2, r3
 8000188:	d0f8      	beq.n	800017c <myDelayUS+0x24>
		{
			if(tnow<told)tcnt+=told-tnow;
 800018a:	68fa      	ldr	r2, [r7, #12]
 800018c:	69fb      	ldr	r3, [r7, #28]
 800018e:	429a      	cmp	r2, r3
 8000190:	d206      	bcs.n	80001a0 <myDelayUS+0x48>
 8000192:	69fa      	ldr	r2, [r7, #28]
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	1ad3      	subs	r3, r2, r3
 8000198:	69ba      	ldr	r2, [r7, #24]
 800019a:	4413      	add	r3, r2
 800019c:	61bb      	str	r3, [r7, #24]
 800019e:	e007      	b.n	80001b0 <myDelayUS+0x58>
			else tcnt+=reload-tnow+told;
 80001a0:	697a      	ldr	r2, [r7, #20]
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	1ad2      	subs	r2, r2, r3
 80001a6:	69fb      	ldr	r3, [r7, #28]
 80001a8:	4413      	add	r3, r2
 80001aa:	69ba      	ldr	r2, [r7, #24]
 80001ac:	4413      	add	r3, r2
 80001ae:	61bb      	str	r3, [r7, #24]
			told=tnow;
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	61fb      	str	r3, [r7, #28]
			if(tcnt>=ticks)break;
 80001b4:	69ba      	ldr	r2, [r7, #24]
 80001b6:	693b      	ldr	r3, [r7, #16]
 80001b8:	429a      	cmp	r2, r3
 80001ba:	d200      	bcs.n	80001be <myDelayUS+0x66>
		tnow=SysTick->VAL;
 80001bc:	e7de      	b.n	800017c <myDelayUS+0x24>
			if(tcnt>=ticks)break;
 80001be:	bf00      	nop
		}
	}
}
 80001c0:	bf00      	nop
 80001c2:	3724      	adds	r7, #36	; 0x24
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	e000e010 	.word	0xe000e010
 80001d0:	20000028 	.word	0x20000028

080001d4 <myDelayMS>:
void myDelayMS(u16 nms)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	80fb      	strh	r3, [r7, #6]
	u32 i;
	for(i=0;i<nms;i++) myDelayUS(1000);
 80001de:	2300      	movs	r3, #0
 80001e0:	60fb      	str	r3, [r7, #12]
 80001e2:	e006      	b.n	80001f2 <myDelayMS+0x1e>
 80001e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e8:	f7ff ffb6 	bl	8000158 <myDelayUS>
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	3301      	adds	r3, #1
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	88fb      	ldrh	r3, [r7, #6]
 80001f4:	68fa      	ldr	r2, [r7, #12]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d3f4      	bcc.n	80001e4 <myDelayMS+0x10>
}
 80001fa:	bf00      	nop
 80001fc:	3710      	adds	r7, #16
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
	...

08000204 <myDelayInit>:

void myDelayInit(u8 SYSCLK)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800020e:	2004      	movs	r0, #4
 8000210:	f000 fe00 	bl	8000e14 <HAL_SYSTICK_CLKSourceConfig>
	fac_us=SYSCLK;
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	4a03      	ldr	r2, [pc, #12]	; (8000224 <myDelayInit+0x20>)
 8000218:	6013      	str	r3, [r2, #0]
}
 800021a:	bf00      	nop
 800021c:	3708      	adds	r7, #8
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000028 	.word	0x20000028

08000228 <LCD_setCS>:

void LCD_GPIO_Init(void)
{
}
void LCD_setCS(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LCD_CTRL, LCD_CS,GPIO_PIN_SET);
	LCD_CTRL->BSRR=LCD_CS;
 800022c:	4b03      	ldr	r3, [pc, #12]	; (800023c <LCD_setCS+0x14>)
 800022e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000232:	611a      	str	r2, [r3, #16]
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	40010c00 	.word	0x40010c00

08000240 <LCD_setRS>:
void LCD_setRS(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LCD_CTRL, LCD_RS,GPIO_PIN_SET);
	LCD_CTRL->BSRR=LCD_RS;
 8000244:	4b03      	ldr	r3, [pc, #12]	; (8000254 <LCD_setRS+0x14>)
 8000246:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800024a:	611a      	str	r2, [r3, #16]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	40010c00 	.word	0x40010c00

08000258 <LCD_setSDA>:
void LCD_setSDA(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LCD_CTRL, LCD_SDA,GPIO_PIN_SET);
	LCD_CTRL->BSRR=LCD_SDA;
 800025c:	4b03      	ldr	r3, [pc, #12]	; (800026c <LCD_setSDA+0x14>)
 800025e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000262:	611a      	str	r2, [r3, #16]
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	40010c00 	.word	0x40010c00

08000270 <LCD_setSCL>:
void LCD_setSCL(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LCD_CTRL, LCD_SCL,GPIO_PIN_SET);
	LCD_CTRL->BSRR=LCD_SCL;
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <LCD_setSCL+0x14>)
 8000276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800027a:	611a      	str	r2, [r3, #16]
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40010c00 	.word	0x40010c00

08000288 <LCD_setRST>:
void LCD_setRST(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LCD_CTRL, LCD_RST,GPIO_PIN_SET);
	LCD_CTRL->BSRR=LCD_RST;
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <LCD_setRST+0x14>)
 800028e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000292:	611a      	str	r2, [r3, #16]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	40010c00 	.word	0x40010c00

080002a0 <LCD_setLED>:
void LCD_setLED(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LCD_CTRL, LCD_LED,GPIO_PIN_SET);
	LCD_CTRL->BSRR=LCD_LED;
 80002a4:	4b03      	ldr	r3, [pc, #12]	; (80002b4 <LCD_setLED+0x14>)
 80002a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002aa:	611a      	str	r2, [r3, #16]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr
 80002b4:	40010c00 	.word	0x40010c00

080002b8 <LCD_resetCS>:
void LCD_resetCS(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LCD_CTRL, LCD_CS,GPIO_PIN_RESET);
	LCD_CTRL->BRR=LCD_CS;
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <LCD_resetCS+0x14>)
 80002be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002c2:	615a      	str	r2, [r3, #20]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	40010c00 	.word	0x40010c00

080002d0 <LCD_resetRS>:
void LCD_resetRS(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LCD_CTRL, LCD_RS,GPIO_PIN_RESET);
	LCD_CTRL->BRR=LCD_RS;
 80002d4:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <LCD_resetRS+0x14>)
 80002d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002da:	615a      	str	r2, [r3, #20]
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <LCD_resetSDA>:
void LCD_resetSDA(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LCD_CTRL, LCD_SDA,GPIO_PIN_RESET);
	LCD_CTRL->BRR=LCD_SDA;
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <LCD_resetSDA+0x14>)
 80002ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80002f2:	615a      	str	r2, [r3, #20]
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40010c00 	.word	0x40010c00

08000300 <LCD_resetSCL>:
void LCD_resetSCL(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LCD_CTRL, LCD_SCL,GPIO_PIN_RESET);
	LCD_CTRL->BRR=LCD_SCL;
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <LCD_resetSCL+0x14>)
 8000306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800030a:	615a      	str	r2, [r3, #20]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	40010c00 	.word	0x40010c00

08000318 <LCD_resetRST>:
void LCD_resetRST(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LCD_CTRL, LCD_RST,GPIO_PIN_RESET);
	LCD_CTRL->BRR=LCD_RST;
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <LCD_resetRST+0x14>)
 800031e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000322:	615a      	str	r2, [r3, #20]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40010c00 	.word	0x40010c00

08000330 <LCD_resetLED>:
void LCD_resetLED(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LCD_CTRL, LCD_LED,GPIO_PIN_RESET);
	LCD_CTRL->BRR=LCD_LED;
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <LCD_resetLED+0x14>)
 8000336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800033a:	615a      	str	r2, [r3, #20]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40010c00 	.word	0x40010c00

08000348 <LCD_Init>:

#ifdef service_display_tftlcd
#include "tftlcd.h"

void LCD_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	LCD_Reset();
 800034c:	f000 f963 	bl	8000616 <LCD_Reset>

	LCD_WriteIndex(0X11);   //sleep out
 8000350:	2011      	movs	r0, #17
 8000352:	f000 f925 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x00);
 8000356:	2000      	movs	r0, #0
 8000358:	f000 f935 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XCF);   //power control B
 800035c:	20cf      	movs	r0, #207	; 0xcf
 800035e:	f000 f91f 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x00);
 8000362:	2000      	movs	r0, #0
 8000364:	f000 f92f 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0xC1);
 8000368:	20c1      	movs	r0, #193	; 0xc1
 800036a:	f000 f92c 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x30);
 800036e:	2030      	movs	r0, #48	; 0x30
 8000370:	f000 f929 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XED);
 8000374:	20ed      	movs	r0, #237	; 0xed
 8000376:	f000 f913 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x64);
 800037a:	2064      	movs	r0, #100	; 0x64
 800037c:	f000 f923 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x03);
 8000380:	2003      	movs	r0, #3
 8000382:	f000 f920 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x12);
 8000386:	2012      	movs	r0, #18
 8000388:	f000 f91d 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x81);
 800038c:	2081      	movs	r0, #129	; 0x81
 800038e:	f000 f91a 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XE8);
 8000392:	20e8      	movs	r0, #232	; 0xe8
 8000394:	f000 f904 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x85);
 8000398:	2085      	movs	r0, #133	; 0x85
 800039a:	f000 f914 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x11);
 800039e:	2011      	movs	r0, #17
 80003a0:	f000 f911 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x78);
 80003a4:	2078      	movs	r0, #120	; 0x78
 80003a6:	f000 f90e 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XF6);
 80003aa:	20f6      	movs	r0, #246	; 0xf6
 80003ac:	f000 f8f8 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x01);
 80003b0:	2001      	movs	r0, #1
 80003b2:	f000 f908 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x30);
 80003b6:	2030      	movs	r0, #48	; 0x30
 80003b8:	f000 f905 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x00);
 80003bc:	2000      	movs	r0, #0
 80003be:	f000 f902 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XCB);
 80003c2:	20cb      	movs	r0, #203	; 0xcb
 80003c4:	f000 f8ec 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x39);
 80003c8:	2039      	movs	r0, #57	; 0x39
 80003ca:	f000 f8fc 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x2C);
 80003ce:	202c      	movs	r0, #44	; 0x2c
 80003d0:	f000 f8f9 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x00);
 80003d4:	2000      	movs	r0, #0
 80003d6:	f000 f8f6 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x34);
 80003da:	2034      	movs	r0, #52	; 0x34
 80003dc:	f000 f8f3 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x05);
 80003e0:	2005      	movs	r0, #5
 80003e2:	f000 f8f0 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XF7);
 80003e6:	20f7      	movs	r0, #247	; 0xf7
 80003e8:	f000 f8da 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x20);
 80003ec:	2020      	movs	r0, #32
 80003ee:	f000 f8ea 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XEA);
 80003f2:	20ea      	movs	r0, #234	; 0xea
 80003f4:	f000 f8d4 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x00);
 80003f8:	2000      	movs	r0, #0
 80003fa:	f000 f8e4 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x00);
 80003fe:	2000      	movs	r0, #0
 8000400:	f000 f8e1 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XC0);
 8000404:	20c0      	movs	r0, #192	; 0xc0
 8000406:	f000 f8cb 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x20);
 800040a:	2020      	movs	r0, #32
 800040c:	f000 f8db 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XC1);
 8000410:	20c1      	movs	r0, #193	; 0xc1
 8000412:	f000 f8c5 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x11);
 8000416:	2011      	movs	r0, #17
 8000418:	f000 f8d5 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XC5);
 800041c:	20c5      	movs	r0, #197	; 0xc5
 800041e:	f000 f8bf 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x31);
 8000422:	2031      	movs	r0, #49	; 0x31
 8000424:	f000 f8cf 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x3C);
 8000428:	203c      	movs	r0, #60	; 0x3c
 800042a:	f000 f8cc 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XC7);
 800042e:	20c7      	movs	r0, #199	; 0xc7
 8000430:	f000 f8b6 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0xA9);
 8000434:	20a9      	movs	r0, #169	; 0xa9
 8000436:	f000 f8c6 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0X3A);
 800043a:	203a      	movs	r0, #58	; 0x3a
 800043c:	f000 f8b0 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0X55);
 8000440:	2055      	movs	r0, #85	; 0x55
 8000442:	f000 f8c0 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0x36);
 8000446:	2036      	movs	r0, #54	; 0x36
 8000448:	f000 f8aa 	bl	80005a0 <LCD_WriteIndex>
	#if Select_Horizontal
		LCD_WriteData8Bit(0xE8);
	#else
		LCD_WriteData8Bit(0x48);
 800044c:	2048      	movs	r0, #72	; 0x48
 800044e:	f000 f8ba 	bl	80005c6 <LCD_WriteData8Bit>
	#endif

	LCD_WriteIndex(0xB1);  /* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
 8000452:	20b1      	movs	r0, #177	; 0xb1
 8000454:	f000 f8a4 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0X00);
 8000458:	2000      	movs	r0, #0
 800045a:	f000 f8b4 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X18);
 800045e:	2018      	movs	r0, #24
 8000460:	f000 f8b1 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0xB4);
 8000464:	20b4      	movs	r0, #180	; 0xb4
 8000466:	f000 f89b 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0X00);
 800046a:	2000      	movs	r0, #0
 800046c:	f000 f8ab 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X00);
 8000470:	2000      	movs	r0, #0
 8000472:	f000 f8a8 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0xF2);  /* Enable 3G (F2h) */
 8000476:	20f2      	movs	r0, #242	; 0xf2
 8000478:	f000 f892 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0X00);
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f8a2 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0x26);  /* Gamma Set (26h) */
 8000482:	2026      	movs	r0, #38	; 0x26
 8000484:	f000 f88c 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0X01);
 8000488:	2001      	movs	r0, #1
 800048a:	f000 f89c 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0xE0);  /* Positive Gamma Correction */
 800048e:	20e0      	movs	r0, #224	; 0xe0
 8000490:	f000 f886 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0X0F);
 8000494:	200f      	movs	r0, #15
 8000496:	f000 f896 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X17);
 800049a:	2017      	movs	r0, #23
 800049c:	f000 f893 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X14);
 80004a0:	2014      	movs	r0, #20
 80004a2:	f000 f890 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X09);
 80004a6:	2009      	movs	r0, #9
 80004a8:	f000 f88d 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X0C);
 80004ac:	200c      	movs	r0, #12
 80004ae:	f000 f88a 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X06);
 80004b2:	2006      	movs	r0, #6
 80004b4:	f000 f887 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X43);
 80004b8:	2043      	movs	r0, #67	; 0x43
 80004ba:	f000 f884 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X75);
 80004be:	2075      	movs	r0, #117	; 0x75
 80004c0:	f000 f881 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X36);
 80004c4:	2036      	movs	r0, #54	; 0x36
 80004c6:	f000 f87e 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X08);
 80004ca:	2008      	movs	r0, #8
 80004cc:	f000 f87b 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X13);
 80004d0:	2013      	movs	r0, #19
 80004d2:	f000 f878 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X05);
 80004d6:	2005      	movs	r0, #5
 80004d8:	f000 f875 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X10);
 80004dc:	2010      	movs	r0, #16
 80004de:	f000 f872 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X0B);
 80004e2:	200b      	movs	r0, #11
 80004e4:	f000 f86f 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X08);
 80004e8:	2008      	movs	r0, #8
 80004ea:	f000 f86c 	bl	80005c6 <LCD_WriteData8Bit>


	LCD_WriteIndex(0xE1);  /* Negative Gamma Correction (E1h) */
 80004ee:	20e1      	movs	r0, #225	; 0xe1
 80004f0:	f000 f856 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData8Bit(0X00);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 f866 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X1F);
 80004fa:	201f      	movs	r0, #31
 80004fc:	f000 f863 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X23);
 8000500:	2023      	movs	r0, #35	; 0x23
 8000502:	f000 f860 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X03);
 8000506:	2003      	movs	r0, #3
 8000508:	f000 f85d 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X0E);
 800050c:	200e      	movs	r0, #14
 800050e:	f000 f85a 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X04);
 8000512:	2004      	movs	r0, #4
 8000514:	f000 f857 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X39);
 8000518:	2039      	movs	r0, #57	; 0x39
 800051a:	f000 f854 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X25);
 800051e:	2025      	movs	r0, #37	; 0x25
 8000520:	f000 f851 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X4D);
 8000524:	204d      	movs	r0, #77	; 0x4d
 8000526:	f000 f84e 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X06);
 800052a:	2006      	movs	r0, #6
 800052c:	f000 f84b 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X0D);
 8000530:	200d      	movs	r0, #13
 8000532:	f000 f848 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X0B);
 8000536:	200b      	movs	r0, #11
 8000538:	f000 f845 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X33);
 800053c:	2033      	movs	r0, #51	; 0x33
 800053e:	f000 f842 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X37);
 8000542:	2037      	movs	r0, #55	; 0x37
 8000544:	f000 f83f 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X0F);
 8000548:	200f      	movs	r0, #15
 800054a:	f000 f83c 	bl	80005c6 <LCD_WriteData8Bit>

	LCD_WriteIndex(0x29);  	/* Display ON (29h) */
 800054e:	2029      	movs	r0, #41	; 0x29
 8000550:	f000 f826 	bl	80005a0 <LCD_WriteIndex>

}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}

08000558 <LCD_Write_spi>:
void  LCD_Write_spi(uint8_t Data)//软件模拟spi写一个字节
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	unsigned char i=0;
 8000562:	2300      	movs	r3, #0
 8000564:	73fb      	strb	r3, [r7, #15]
	for(i=8;i>0;i--)
 8000566:	2308      	movs	r3, #8
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	e012      	b.n	8000592 <LCD_Write_spi+0x3a>
	{
		if(Data&0x80)
 800056c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000570:	2b00      	cmp	r3, #0
 8000572:	da02      	bge.n	800057a <LCD_Write_spi+0x22>
	  LCD_SDA_SET; //输出数据
 8000574:	f7ff fe70 	bl	8000258 <LCD_setSDA>
 8000578:	e001      	b.n	800057e <LCD_Write_spi+0x26>
      else LCD_SDA_CLR;
 800057a:	f7ff feb5 	bl	80002e8 <LCD_resetSDA>

      LCD_SCL_CLR;
 800057e:	f7ff febf 	bl	8000300 <LCD_resetSCL>
      LCD_SCL_SET;
 8000582:	f7ff fe75 	bl	8000270 <LCD_setSCL>
      Data<<=1;
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	71fb      	strb	r3, [r7, #7]
	for(i=8;i>0;i--)
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	3b01      	subs	r3, #1
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1e9      	bne.n	800056c <LCD_Write_spi+0x14>
	}
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <LCD_WriteIndex>:
//void LCD_Write_spi(uint8_t data)//硬
//{
//	spiTransmit(&data,1);
//}
void LCD_WriteIndex(uint8_t command)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	LCD_CS_CLR;
 80005aa:	f7ff fe85 	bl	80002b8 <LCD_resetCS>
	LCD_RS_CLR;
 80005ae:	f7ff fe8f 	bl	80002d0 <LCD_resetRS>
	LCD_Write_spi(command);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ffcf 	bl	8000558 <LCD_Write_spi>
	LCD_CS_SET;
 80005ba:	f7ff fe35 	bl	8000228 <LCD_setCS>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <LCD_WriteData8Bit>:
void LCD_WriteData8Bit(uint8_t data)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	4603      	mov	r3, r0
 80005ce:	71fb      	strb	r3, [r7, #7]
	LCD_CS_CLR;
 80005d0:	f7ff fe72 	bl	80002b8 <LCD_resetCS>
	LCD_RS_SET;
 80005d4:	f7ff fe34 	bl	8000240 <LCD_setRS>
	LCD_Write_spi(data);
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ffbc 	bl	8000558 <LCD_Write_spi>
	LCD_CS_SET;
 80005e0:	f7ff fe22 	bl	8000228 <LCD_setCS>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <LCD_WriteData16Bit>:
void LCD_WriteData16Bit(uint16_t data)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	LCD_WriteData8Bit(data>>8);
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ffe1 	bl	80005c6 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(data);
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffdc 	bl	80005c6 <LCD_WriteData8Bit>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <LCD_Reset>:
void LCD_Reset(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 800061a:	f7ff fe7d 	bl	8000318 <LCD_resetRST>
	myDelayMS(100);
 800061e:	2064      	movs	r0, #100	; 0x64
 8000620:	f7ff fdd8 	bl	80001d4 <myDelayMS>
	LCD_RST_SET;
 8000624:	f7ff fe30 	bl	8000288 <LCD_setRST>
	myDelayMS(50);
 8000628:	2032      	movs	r0, #50	; 0x32
 800062a:	f7ff fdd3 	bl	80001d4 <myDelayMS>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}

08000632 <LCD_Clear>:
void LCD_Clear(uint16_t Color)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b084      	sub	sp, #16
 8000636:	af00      	add	r7, sp, #0
 8000638:	4603      	mov	r3, r0
 800063a:	80fb      	strh	r3, [r7, #6]
   unsigned int i;
   LCD_SetRegion(0,0,X_MAX_PIXEL-1,Y_MAX_PIXEL-1);
 800063c:	f240 133f 	movw	r3, #319	; 0x13f
 8000640:	22ef      	movs	r2, #239	; 0xef
 8000642:	2100      	movs	r1, #0
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f818 	bl	800067a <LCD_SetRegion>
   LCD_CS_CLR;
 800064a:	f7ff fe35 	bl	80002b8 <LCD_resetCS>
   LCD_RS_SET;
 800064e:	f7ff fdf7 	bl	8000240 <LCD_setRS>
   for(i=0;i<X_MAX_PIXEL*Y_MAX_PIXEL;i++)
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e006      	b.n	8000666 <LCD_Clear+0x34>
   {
	   LCD_WriteData16Bit(Color);
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffc6 	bl	80005ec <LCD_WriteData16Bit>
   for(i=0;i<X_MAX_PIXEL*Y_MAX_PIXEL;i++)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	3301      	adds	r3, #1
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800066c:	d3f4      	bcc.n	8000658 <LCD_Clear+0x26>


   }
		LCD_CS_SET;
 800066e:	f7ff fddb 	bl	8000228 <LCD_setCS>
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <LCD_SetRegion>:
	LCD_WriteData16Bit(Ypos);
	LCD_WriteIndex(0x2C);
}

void LCD_SetRegion(uint16_t x1, uint16_t y1,uint16_t x2,uint16_t y2)
{
 800067a:	b590      	push	{r4, r7, lr}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	4604      	mov	r4, r0
 8000682:	4608      	mov	r0, r1
 8000684:	4611      	mov	r1, r2
 8000686:	461a      	mov	r2, r3
 8000688:	4623      	mov	r3, r4
 800068a:	80fb      	strh	r3, [r7, #6]
 800068c:	4603      	mov	r3, r0
 800068e:	80bb      	strh	r3, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	807b      	strh	r3, [r7, #2]
 8000694:	4613      	mov	r3, r2
 8000696:	803b      	strh	r3, [r7, #0]
	LCD_WriteIndex(0x2A);
 8000698:	202a      	movs	r0, #42	; 0x2a
 800069a:	f7ff ff81 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData16Bit(x1);
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ffa3 	bl	80005ec <LCD_WriteData16Bit>
	LCD_WriteData16Bit(x2);
 80006a6:	887b      	ldrh	r3, [r7, #2]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff9f 	bl	80005ec <LCD_WriteData16Bit>
	LCD_WriteIndex(0x2B);
 80006ae:	202b      	movs	r0, #43	; 0x2b
 80006b0:	f7ff ff76 	bl	80005a0 <LCD_WriteIndex>
	LCD_WriteData16Bit(y1);
 80006b4:	88bb      	ldrh	r3, [r7, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff98 	bl	80005ec <LCD_WriteData16Bit>
	LCD_WriteData16Bit(y2);
 80006bc:	883b      	ldrh	r3, [r7, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff94 	bl	80005ec <LCD_WriteData16Bit>
	LCD_WriteIndex(0x2C);
 80006c4:	202c      	movs	r0, #44	; 0x2c
 80006c6:	f7ff ff6b 	bl	80005a0 <LCD_WriteIndex>
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd90      	pop	{r4, r7, pc}

080006d2 <Color_Test>:

void Color_Test(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
	uint8_t i=1;
 80006d8:	2301      	movs	r3, #1
 80006da:	71fb      	strb	r3, [r7, #7]
	LCD_Clear(GRAY0);
 80006dc:	f64e 707d 	movw	r0, #61309	; 0xef7d
 80006e0:	f7ff ffa7 	bl	8000632 <LCD_Clear>
	myDelayMS(500);
 80006e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e8:	f7ff fd74 	bl	80001d4 <myDelayMS>

	while(i--)
 80006ec:	e025      	b.n	800073a <Color_Test+0x68>
	{
		LCD_Clear(WHITE); myDelayMS(300);
 80006ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006f2:	f7ff ff9e 	bl	8000632 <LCD_Clear>
 80006f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006fa:	f7ff fd6b 	bl	80001d4 <myDelayMS>
		LCD_Clear(BLACK); myDelayMS(300);
 80006fe:	2000      	movs	r0, #0
 8000700:	f7ff ff97 	bl	8000632 <LCD_Clear>
 8000704:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000708:	f7ff fd64 	bl	80001d4 <myDelayMS>
		LCD_Clear(RED);	  myDelayMS(300);
 800070c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000710:	f7ff ff8f 	bl	8000632 <LCD_Clear>
 8000714:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000718:	f7ff fd5c 	bl	80001d4 <myDelayMS>
		LCD_Clear(GREEN); myDelayMS(300);
 800071c:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000720:	f7ff ff87 	bl	8000632 <LCD_Clear>
 8000724:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000728:	f7ff fd54 	bl	80001d4 <myDelayMS>
		LCD_Clear(BLUE);  myDelayMS(300);
 800072c:	201f      	movs	r0, #31
 800072e:	f7ff ff80 	bl	8000632 <LCD_Clear>
 8000732:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000736:	f7ff fd4d 	bl	80001d4 <myDelayMS>
	while(i--)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	1e5a      	subs	r2, r3, #1
 800073e:	71fa      	strb	r2, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1d4      	bne.n	80006ee <Color_Test+0x1c>
	}
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <Test_Demo>:

//测试函数
void Test_Demo(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	LCD_Init();
 8000750:	f7ff fdfa 	bl	8000348 <LCD_Init>
	LCD_LED_SET;//通过IO控制背光亮
 8000754:	f7ff fda4 	bl	80002a0 <LCD_setLED>
	Color_Test();//简单纯色填充测试
 8000758:	f7ff ffbb 	bl	80006d2 <Color_Test>
	myDelayMS(1500);
 800075c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000760:	f7ff fd38 	bl	80001d4 <myDelayMS>
	LCD_LED_CLR;//IO控制背光灭
 8000764:	f7ff fde4 	bl	8000330 <LCD_resetLED>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_GPIO_Init+0x90>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <MX_GPIO_Init+0x90>)
 8000786:	f043 0320 	orr.w	r3, r3, #32
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_GPIO_Init+0x90>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_GPIO_Init+0x90>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a17      	ldr	r2, [pc, #92]	; (80007fc <MX_GPIO_Init+0x90>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_GPIO_Init+0x90>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_GPIO_Init+0x90>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a11      	ldr	r2, [pc, #68]	; (80007fc <MX_GPIO_Init+0x90>)
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_GPIO_Init+0x90>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_9, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80007ce:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_GPIO_Init+0x94>)
 80007d0:	f000 fc96 	bl	8001100 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 PB12 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_15;
 80007d4:	f44f 433e 	mov.w	r3, #48640	; 0xbe00
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_GPIO_Init+0x94>)
 80007ee:	f000 fb2d 	bl	8000e4c <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010c00 	.word	0x40010c00

08000804 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_I2C1_Init+0x50>)
 800080a:	4a13      	ldr	r2, [pc, #76]	; (8000858 <MX_I2C1_Init+0x54>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_I2C1_Init+0x50>)
 8000810:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_I2C1_Init+0x58>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_I2C1_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_I2C1_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_I2C1_Init+0x50>)
 8000822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000826:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_I2C1_Init+0x50>)
 8000842:	f000 fc75 	bl	8001130 <HAL_I2C_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800084c:	f000 f89d 	bl	800098a <Error_Handler>
  }

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000002c 	.word	0x2000002c
 8000858:	40005400 	.word	0x40005400
 800085c:	000186a0 	.word	0x000186a0

08000860 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <HAL_I2C_MspInit+0x70>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d123      	bne.n	80008c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <HAL_I2C_MspInit+0x74>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <HAL_I2C_MspInit+0x74>)
 8000886:	f043 0308 	orr.w	r3, r3, #8
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <HAL_I2C_MspInit+0x74>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0308 	and.w	r3, r3, #8
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000898:	23c0      	movs	r3, #192	; 0xc0
 800089a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800089c:	2312      	movs	r3, #18
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4619      	mov	r1, r3
 80008aa:	480b      	ldr	r0, [pc, #44]	; (80008d8 <HAL_I2C_MspInit+0x78>)
 80008ac:	f000 face 	bl	8000e4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_I2C_MspInit+0x74>)
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_I2C_MspInit+0x74>)
 80008b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ba:	61d3      	str	r3, [r2, #28]
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_I2C_MspInit+0x74>)
 80008be:	69db      	ldr	r3, [r3, #28]
 80008c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40005400 	.word	0x40005400
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010c00 	.word	0x40010c00

080008dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e0:	f000 f952 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e4:	f000 f80c 	bl	8000900 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  myDelayInit(72);
 80008e8:	2048      	movs	r0, #72	; 0x48
 80008ea:	f7ff fc8b 	bl	8000204 <myDelayInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ee:	f7ff ff3d 	bl	800076c <MX_GPIO_Init>
//  MX_SPI2_Init();
  MX_I2C1_Init();
 80008f2:	f7ff ff87 	bl	8000804 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80008f6:	f000 f8ad 	bl	8000a54 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mylogic();
 80008fa:	f7ff fc27 	bl	800014c <mylogic>
 80008fe:	e7fc      	b.n	80008fa <main+0x1e>

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b090      	sub	sp, #64	; 0x40
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0318 	add.w	r3, r7, #24
 800090a:	2228      	movs	r2, #40	; 0x28
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fa62 	bl	8001dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000922:	2301      	movs	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000934:	2302      	movs	r3, #2
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800093c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800093e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fd29 	bl	80013a0 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000954:	f000 f819 	bl	800098a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2302      	movs	r3, #2
 800095e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2102      	movs	r1, #2
 8000972:	4618      	mov	r0, r3
 8000974:	f000 ff94 	bl	80018a0 <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800097e:	f000 f804 	bl	800098a <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	3740      	adds	r7, #64	; 0x40
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x6>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_MspInit+0x5c>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <HAL_MspInit+0x5c>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_MspInit+0x5c>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x5c>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_MspInit+0x5c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_MspInit+0x5c>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_MspInit+0x60>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <HAL_MspInit+0x60>)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010000 	.word	0x40010000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr

08000a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3e:	f000 f8e9 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
	...

08000a54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <MX_USART2_UART_Init+0x50>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a8c:	f001 f8a4 	bl	8001bd8 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a96:	f7ff ff78 	bl	800098a <Error_Handler>
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000080 	.word	0x20000080
 8000aa4:	40004400 	.word	0x40004400

08000aa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <HAL_UART_MspInit+0x88>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d12f      	bne.n	8000b28 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_UART_MspInit+0x8c>)
 8000aca:	69db      	ldr	r3, [r3, #28]
 8000acc:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <HAL_UART_MspInit+0x8c>)
 8000ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad2:	61d3      	str	r3, [r2, #28]
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_UART_MspInit+0x8c>)
 8000ad6:	69db      	ldr	r3, [r3, #28]
 8000ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_UART_MspInit+0x8c>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <HAL_UART_MspInit+0x8c>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_UART_MspInit+0x8c>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000af8:	2304      	movs	r3, #4
 8000afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480b      	ldr	r0, [pc, #44]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000b0c:	f000 f99e 	bl	8000e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b10:	2308      	movs	r3, #8
 8000b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	4619      	mov	r1, r3
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000b24:	f000 f992 	bl	8000e4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3720      	adds	r7, #32
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010800 	.word	0x40010800

08000b3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b3e:	e003      	b.n	8000b48 <LoopCopyDataInit>

08000b40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b46:	3104      	adds	r1, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b48:	480a      	ldr	r0, [pc, #40]	; (8000b74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b50:	d3f6      	bcc.n	8000b40 <CopyDataInit>
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b54:	e002      	b.n	8000b5c <LoopFillZerobss>

08000b56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b58:	f842 3b04 	str.w	r3, [r2], #4

08000b5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b60:	d3f9      	bcc.n	8000b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b62:	f7ff ff70 	bl	8000a46 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f001 f913 	bl	8001d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6a:	f7ff feb7 	bl	80008dc <main>
  bx lr
 8000b6e:	4770      	bx	lr
  ldr r3, =_sidata
 8000b70:	08001e34 	.word	0x08001e34
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b78:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000b80:	200000c4 	.word	0x200000c4

08000b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_2_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x28>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x28>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f907 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 f808 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fef6 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40022000 	.word	0x40022000

08000bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x54>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x58>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f911 	bl	8000dfa <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00e      	b.n	8000c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d80a      	bhi.n	8000bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f000 f8e7 	bl	8000dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <HAL_InitTick+0x5c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x1c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x20>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <HAL_IncTick+0x20>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	20000008 	.word	0x20000008
 8000c34:	200000c0 	.word	0x200000c0

08000c38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <HAL_GetTick+0x10>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	200000c0 	.word	0x200000c0

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff90 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff49 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff5e 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff90 	bl	8000d04 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5f 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffb0 	bl	8000d68 <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	d106      	bne.n	8000e30 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000e2e:	e005      	b.n	8000e3c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e36:	f023 0304 	bic.w	r3, r3, #4
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b08b      	sub	sp, #44	; 0x2c
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5e:	e127      	b.n	80010b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e60:	2201      	movs	r2, #1
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 8116 	bne.w	80010aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b12      	cmp	r3, #18
 8000e84:	d034      	beq.n	8000ef0 <HAL_GPIO_Init+0xa4>
 8000e86:	2b12      	cmp	r3, #18
 8000e88:	d80d      	bhi.n	8000ea6 <HAL_GPIO_Init+0x5a>
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d02b      	beq.n	8000ee6 <HAL_GPIO_Init+0x9a>
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d804      	bhi.n	8000e9c <HAL_GPIO_Init+0x50>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d031      	beq.n	8000efa <HAL_GPIO_Init+0xae>
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d01c      	beq.n	8000ed4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e9a:	e048      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d043      	beq.n	8000f28 <HAL_GPIO_Init+0xdc>
 8000ea0:	2b11      	cmp	r3, #17
 8000ea2:	d01b      	beq.n	8000edc <HAL_GPIO_Init+0x90>
          break;
 8000ea4:	e043      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ea6:	4a89      	ldr	r2, [pc, #548]	; (80010cc <HAL_GPIO_Init+0x280>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d026      	beq.n	8000efa <HAL_GPIO_Init+0xae>
 8000eac:	4a87      	ldr	r2, [pc, #540]	; (80010cc <HAL_GPIO_Init+0x280>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d806      	bhi.n	8000ec0 <HAL_GPIO_Init+0x74>
 8000eb2:	4a87      	ldr	r2, [pc, #540]	; (80010d0 <HAL_GPIO_Init+0x284>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d020      	beq.n	8000efa <HAL_GPIO_Init+0xae>
 8000eb8:	4a86      	ldr	r2, [pc, #536]	; (80010d4 <HAL_GPIO_Init+0x288>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d01d      	beq.n	8000efa <HAL_GPIO_Init+0xae>
          break;
 8000ebe:	e036      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ec0:	4a85      	ldr	r2, [pc, #532]	; (80010d8 <HAL_GPIO_Init+0x28c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d019      	beq.n	8000efa <HAL_GPIO_Init+0xae>
 8000ec6:	4a85      	ldr	r2, [pc, #532]	; (80010dc <HAL_GPIO_Init+0x290>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d016      	beq.n	8000efa <HAL_GPIO_Init+0xae>
 8000ecc:	4a84      	ldr	r2, [pc, #528]	; (80010e0 <HAL_GPIO_Init+0x294>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d013      	beq.n	8000efa <HAL_GPIO_Init+0xae>
          break;
 8000ed2:	e02c      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	623b      	str	r3, [r7, #32]
          break;
 8000eda:	e028      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	623b      	str	r3, [r7, #32]
          break;
 8000ee4:	e023      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	3308      	adds	r3, #8
 8000eec:	623b      	str	r3, [r7, #32]
          break;
 8000eee:	e01e      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	330c      	adds	r3, #12
 8000ef6:	623b      	str	r3, [r7, #32]
          break;
 8000ef8:	e019      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d102      	bne.n	8000f08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f02:	2304      	movs	r3, #4
 8000f04:	623b      	str	r3, [r7, #32]
          break;
 8000f06:	e012      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d105      	bne.n	8000f1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f10:	2308      	movs	r3, #8
 8000f12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	611a      	str	r2, [r3, #16]
          break;
 8000f1a:	e008      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	615a      	str	r2, [r3, #20]
          break;
 8000f26:	e002      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
          break;
 8000f2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	2bff      	cmp	r3, #255	; 0xff
 8000f32:	d801      	bhi.n	8000f38 <HAL_GPIO_Init+0xec>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	e001      	b.n	8000f3c <HAL_GPIO_Init+0xf0>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	2bff      	cmp	r3, #255	; 0xff
 8000f42:	d802      	bhi.n	8000f4a <HAL_GPIO_Init+0xfe>
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_Init+0x104>
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	3b08      	subs	r3, #8
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	210f      	movs	r1, #15
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	401a      	ands	r2, r3
 8000f62:	6a39      	ldr	r1, [r7, #32]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 8096 	beq.w	80010aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7e:	4b59      	ldr	r3, [pc, #356]	; (80010e4 <HAL_GPIO_Init+0x298>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a58      	ldr	r2, [pc, #352]	; (80010e4 <HAL_GPIO_Init+0x298>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b56      	ldr	r3, [pc, #344]	; (80010e4 <HAL_GPIO_Init+0x298>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f96:	4a54      	ldr	r2, [pc, #336]	; (80010e8 <HAL_GPIO_Init+0x29c>)
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <HAL_GPIO_Init+0x2a0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x19e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4a      	ldr	r2, [pc, #296]	; (80010f0 <HAL_GPIO_Init+0x2a4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x19a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a49      	ldr	r2, [pc, #292]	; (80010f4 <HAL_GPIO_Init+0x2a8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x196>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a48      	ldr	r2, [pc, #288]	; (80010f8 <HAL_GPIO_Init+0x2ac>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x192>
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e006      	b.n	8000fec <HAL_GPIO_Init+0x1a0>
 8000fde:	2304      	movs	r3, #4
 8000fe0:	e004      	b.n	8000fec <HAL_GPIO_Init+0x1a0>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_Init+0x1a0>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <HAL_GPIO_Init+0x1a0>
 8000fea:	2300      	movs	r3, #0
 8000fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fee:	f002 0203 	and.w	r2, r2, #3
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	4093      	lsls	r3, r2
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ffc:	493a      	ldr	r1, [pc, #232]	; (80010e8 <HAL_GPIO_Init+0x29c>)
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3302      	adds	r3, #2
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d006      	beq.n	8001024 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4938      	ldr	r1, [pc, #224]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
 8001022:	e006      	b.n	8001032 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001024:	4b35      	ldr	r3, [pc, #212]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	43db      	mvns	r3, r3
 800102c:	4933      	ldr	r1, [pc, #204]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800102e:	4013      	ands	r3, r2
 8001030:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d006      	beq.n	800104c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	492e      	ldr	r1, [pc, #184]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	604b      	str	r3, [r1, #4]
 800104a:	e006      	b.n	800105a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800104c:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	43db      	mvns	r3, r3
 8001054:	4929      	ldr	r1, [pc, #164]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001056:	4013      	ands	r3, r2
 8001058:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d006      	beq.n	8001074 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	4924      	ldr	r1, [pc, #144]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	608b      	str	r3, [r1, #8]
 8001072:	e006      	b.n	8001082 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	43db      	mvns	r3, r3
 800107c:	491f      	ldr	r1, [pc, #124]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800107e:	4013      	ands	r3, r2
 8001080:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d006      	beq.n	800109c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	491a      	ldr	r1, [pc, #104]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	60cb      	str	r3, [r1, #12]
 800109a:	e006      	b.n	80010aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	4915      	ldr	r1, [pc, #84]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 80010a6:	4013      	ands	r3, r2
 80010a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	3301      	adds	r3, #1
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f47f aed0 	bne.w	8000e60 <HAL_GPIO_Init+0x14>
  }
}
 80010c0:	bf00      	nop
 80010c2:	372c      	adds	r7, #44	; 0x2c
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	10210000 	.word	0x10210000
 80010d0:	10110000 	.word	0x10110000
 80010d4:	10120000 	.word	0x10120000
 80010d8:	10310000 	.word	0x10310000
 80010dc:	10320000 	.word	0x10320000
 80010e0:	10220000 	.word	0x10220000
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010000 	.word	0x40010000
 80010ec:	40010800 	.word	0x40010800
 80010f0:	40010c00 	.word	0x40010c00
 80010f4:	40011000 	.word	0x40011000
 80010f8:	40011400 	.word	0x40011400
 80010fc:	40010400 	.word	0x40010400

08001100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
 800110c:	4613      	mov	r3, r2
 800110e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001110:	787b      	ldrb	r3, [r7, #1]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800111c:	e003      	b.n	8001126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	041a      	lsls	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	611a      	str	r2, [r3, #16]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e11f      	b.n	8001382 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d106      	bne.n	800115c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fb82 	bl	8000860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2224      	movs	r2, #36	; 0x24
 8001160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001192:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001194:	f000 fcda 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 8001198:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	4a7b      	ldr	r2, [pc, #492]	; (800138c <HAL_I2C_Init+0x25c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d807      	bhi.n	80011b4 <HAL_I2C_Init+0x84>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4a7a      	ldr	r2, [pc, #488]	; (8001390 <HAL_I2C_Init+0x260>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	bf94      	ite	ls
 80011ac:	2301      	movls	r3, #1
 80011ae:	2300      	movhi	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	e006      	b.n	80011c2 <HAL_I2C_Init+0x92>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4a77      	ldr	r2, [pc, #476]	; (8001394 <HAL_I2C_Init+0x264>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	bf94      	ite	ls
 80011bc:	2301      	movls	r3, #1
 80011be:	2300      	movhi	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0db      	b.n	8001382 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4a72      	ldr	r2, [pc, #456]	; (8001398 <HAL_I2C_Init+0x268>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	0c9b      	lsrs	r3, r3, #18
 80011d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a64      	ldr	r2, [pc, #400]	; (800138c <HAL_I2C_Init+0x25c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d802      	bhi.n	8001204 <HAL_I2C_Init+0xd4>
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	3301      	adds	r3, #1
 8001202:	e009      	b.n	8001218 <HAL_I2C_Init+0xe8>
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	4a63      	ldr	r2, [pc, #396]	; (800139c <HAL_I2C_Init+0x26c>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	099b      	lsrs	r3, r3, #6
 8001216:	3301      	adds	r3, #1
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	430b      	orrs	r3, r1
 800121e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800122a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4956      	ldr	r1, [pc, #344]	; (800138c <HAL_I2C_Init+0x25c>)
 8001234:	428b      	cmp	r3, r1
 8001236:	d80d      	bhi.n	8001254 <HAL_I2C_Init+0x124>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1e59      	subs	r1, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fbb1 f3f3 	udiv	r3, r1, r3
 8001246:	3301      	adds	r3, #1
 8001248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124c:	2b04      	cmp	r3, #4
 800124e:	bf38      	it	cc
 8001250:	2304      	movcc	r3, #4
 8001252:	e04f      	b.n	80012f4 <HAL_I2C_Init+0x1c4>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d111      	bne.n	8001280 <HAL_I2C_Init+0x150>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1e58      	subs	r0, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6859      	ldr	r1, [r3, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	440b      	add	r3, r1
 800126a:	fbb0 f3f3 	udiv	r3, r0, r3
 800126e:	3301      	adds	r3, #1
 8001270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf0c      	ite	eq
 8001278:	2301      	moveq	r3, #1
 800127a:	2300      	movne	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	e012      	b.n	80012a6 <HAL_I2C_Init+0x176>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	1e58      	subs	r0, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6859      	ldr	r1, [r3, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	0099      	lsls	r1, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	fbb0 f3f3 	udiv	r3, r0, r3
 8001296:	3301      	adds	r3, #1
 8001298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800129c:	2b00      	cmp	r3, #0
 800129e:	bf0c      	ite	eq
 80012a0:	2301      	moveq	r3, #1
 80012a2:	2300      	movne	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2C_Init+0x17e>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e022      	b.n	80012f4 <HAL_I2C_Init+0x1c4>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10e      	bne.n	80012d4 <HAL_I2C_Init+0x1a4>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1e58      	subs	r0, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6859      	ldr	r1, [r3, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	440b      	add	r3, r1
 80012c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c8:	3301      	adds	r3, #1
 80012ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d2:	e00f      	b.n	80012f4 <HAL_I2C_Init+0x1c4>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	1e58      	subs	r0, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6859      	ldr	r1, [r3, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	0099      	lsls	r1, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ea:	3301      	adds	r3, #1
 80012ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	6809      	ldr	r1, [r1, #0]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69da      	ldr	r2, [r3, #28]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001322:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6911      	ldr	r1, [r2, #16]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68d2      	ldr	r2, [r2, #12]
 800132e:	4311      	orrs	r1, r2
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	430b      	orrs	r3, r1
 8001336:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2220      	movs	r2, #32
 800136e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	000186a0 	.word	0x000186a0
 8001390:	001e847f 	.word	0x001e847f
 8001394:	003d08ff 	.word	0x003d08ff
 8001398:	431bde83 	.word	0x431bde83
 800139c:	10624dd3 	.word	0x10624dd3

080013a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e26c      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8087 	beq.w	80014ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013c0:	4b92      	ldr	r3, [pc, #584]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 030c 	and.w	r3, r3, #12
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d00c      	beq.n	80013e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013cc:	4b8f      	ldr	r3, [pc, #572]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d112      	bne.n	80013fe <HAL_RCC_OscConfig+0x5e>
 80013d8:	4b8c      	ldr	r3, [pc, #560]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e4:	d10b      	bne.n	80013fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e6:	4b89      	ldr	r3, [pc, #548]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d06c      	beq.n	80014cc <HAL_RCC_OscConfig+0x12c>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d168      	bne.n	80014cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e246      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001406:	d106      	bne.n	8001416 <HAL_RCC_OscConfig+0x76>
 8001408:	4b80      	ldr	r3, [pc, #512]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a7f      	ldr	r2, [pc, #508]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 800140e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	e02e      	b.n	8001474 <HAL_RCC_OscConfig+0xd4>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10c      	bne.n	8001438 <HAL_RCC_OscConfig+0x98>
 800141e:	4b7b      	ldr	r3, [pc, #492]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a7a      	ldr	r2, [pc, #488]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b78      	ldr	r3, [pc, #480]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a77      	ldr	r2, [pc, #476]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e01d      	b.n	8001474 <HAL_RCC_OscConfig+0xd4>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0xbc>
 8001442:	4b72      	ldr	r3, [pc, #456]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a71      	ldr	r2, [pc, #452]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b6f      	ldr	r3, [pc, #444]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a6e      	ldr	r2, [pc, #440]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0xd4>
 800145c:	4b6b      	ldr	r3, [pc, #428]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a6a      	ldr	r2, [pc, #424]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b68      	ldr	r3, [pc, #416]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a67      	ldr	r2, [pc, #412]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 800146e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001472:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fbdc 	bl	8000c38 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fbd8 	bl	8000c38 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1fa      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	4b5d      	ldr	r3, [pc, #372]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0xe4>
 80014a2:	e014      	b.n	80014ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fbc8 	bl	8000c38 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fbc4 	bl	8000c38 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	; 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e1e6      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014be:	4b53      	ldr	r3, [pc, #332]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x10c>
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d063      	beq.n	80015a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014da:	4b4c      	ldr	r3, [pc, #304]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00b      	beq.n	80014fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014e6:	4b49      	ldr	r3, [pc, #292]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d11c      	bne.n	800152c <HAL_RCC_OscConfig+0x18c>
 80014f2:	4b46      	ldr	r3, [pc, #280]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d116      	bne.n	800152c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	4b43      	ldr	r3, [pc, #268]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <HAL_RCC_OscConfig+0x176>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e1ba      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001516:	4b3d      	ldr	r3, [pc, #244]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4939      	ldr	r1, [pc, #228]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152a:	e03a      	b.n	80015a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d020      	beq.n	8001576 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001534:	4b36      	ldr	r3, [pc, #216]	; (8001610 <HAL_RCC_OscConfig+0x270>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff fb7d 	bl	8000c38 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fb79 	bl	8000c38 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e19b      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4927      	ldr	r1, [pc, #156]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]
 8001574:	e015      	b.n	80015a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <HAL_RCC_OscConfig+0x270>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fb5c 	bl	8000c38 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001584:	f7ff fb58 	bl	8000c38 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e17a      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d03a      	beq.n	8001624 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d019      	beq.n	80015ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_RCC_OscConfig+0x274>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015bc:	f7ff fb3c 	bl	8000c38 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff fb38 	bl	8000c38 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e15a      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_RCC_OscConfig+0x26c>)
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f000 fada 	bl	8001b9c <RCC_Delay>
 80015e8:	e01c      	b.n	8001624 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_RCC_OscConfig+0x274>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff fb22 	bl	8000c38 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f6:	e00f      	b.n	8001618 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff fb1e 	bl	8000c38 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d908      	bls.n	8001618 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e140      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	42420000 	.word	0x42420000
 8001614:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001618:	4b9e      	ldr	r3, [pc, #632]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1e9      	bne.n	80015f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80a6 	beq.w	800177e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001636:	4b97      	ldr	r3, [pc, #604]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10d      	bne.n	800165e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	4b94      	ldr	r3, [pc, #592]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a93      	ldr	r2, [pc, #588]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	61d3      	str	r3, [r2, #28]
 800164e:	4b91      	ldr	r3, [pc, #580]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800165a:	2301      	movs	r3, #1
 800165c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165e:	4b8e      	ldr	r3, [pc, #568]	; (8001898 <HAL_RCC_OscConfig+0x4f8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	2b00      	cmp	r3, #0
 8001668:	d118      	bne.n	800169c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800166a:	4b8b      	ldr	r3, [pc, #556]	; (8001898 <HAL_RCC_OscConfig+0x4f8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a8a      	ldr	r2, [pc, #552]	; (8001898 <HAL_RCC_OscConfig+0x4f8>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001676:	f7ff fadf 	bl	8000c38 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167e:	f7ff fadb 	bl	8000c38 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b64      	cmp	r3, #100	; 0x64
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0fd      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001690:	4b81      	ldr	r3, [pc, #516]	; (8001898 <HAL_RCC_OscConfig+0x4f8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_OscConfig+0x312>
 80016a4:	4b7b      	ldr	r3, [pc, #492]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4a7a      	ldr	r2, [pc, #488]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6213      	str	r3, [r2, #32]
 80016b0:	e02d      	b.n	800170e <HAL_RCC_OscConfig+0x36e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x334>
 80016ba:	4b76      	ldr	r3, [pc, #472]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4a75      	ldr	r2, [pc, #468]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6213      	str	r3, [r2, #32]
 80016c6:	4b73      	ldr	r3, [pc, #460]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a72      	ldr	r2, [pc, #456]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	6213      	str	r3, [r2, #32]
 80016d2:	e01c      	b.n	800170e <HAL_RCC_OscConfig+0x36e>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d10c      	bne.n	80016f6 <HAL_RCC_OscConfig+0x356>
 80016dc:	4b6d      	ldr	r3, [pc, #436]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4a6c      	ldr	r2, [pc, #432]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6213      	str	r3, [r2, #32]
 80016e8:	4b6a      	ldr	r3, [pc, #424]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a69      	ldr	r2, [pc, #420]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	e00b      	b.n	800170e <HAL_RCC_OscConfig+0x36e>
 80016f6:	4b67      	ldr	r3, [pc, #412]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	4a66      	ldr	r2, [pc, #408]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	6213      	str	r3, [r2, #32]
 8001702:	4b64      	ldr	r3, [pc, #400]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a63      	ldr	r2, [pc, #396]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d015      	beq.n	8001742 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001716:	f7ff fa8f 	bl	8000c38 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	e00a      	b.n	8001734 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff fa8b 	bl	8000c38 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f241 3288 	movw	r2, #5000	; 0x1388
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e0ab      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001734:	4b57      	ldr	r3, [pc, #348]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0ee      	beq.n	800171e <HAL_RCC_OscConfig+0x37e>
 8001740:	e014      	b.n	800176c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff fa79 	bl	8000c38 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff fa75 	bl	8000c38 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e095      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001760:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ee      	bne.n	800174a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d105      	bne.n	800177e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001772:	4b48      	ldr	r3, [pc, #288]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a47      	ldr	r2, [pc, #284]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 8001778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8081 	beq.w	800188a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001788:	4b42      	ldr	r3, [pc, #264]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b08      	cmp	r3, #8
 8001792:	d061      	beq.n	8001858 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d146      	bne.n	800182a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179c:	4b3f      	ldr	r3, [pc, #252]	; (800189c <HAL_RCC_OscConfig+0x4fc>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a2:	f7ff fa49 	bl	8000c38 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017aa:	f7ff fa45 	bl	8000c38 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e067      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017bc:	4b35      	ldr	r3, [pc, #212]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f0      	bne.n	80017aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d0:	d108      	bne.n	80017e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017d2:	4b30      	ldr	r3, [pc, #192]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	492d      	ldr	r1, [pc, #180]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e4:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a19      	ldr	r1, [r3, #32]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	430b      	orrs	r3, r1
 80017f6:	4927      	ldr	r1, [pc, #156]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_RCC_OscConfig+0x4fc>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff fa19 	bl	8000c38 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff fa15 	bl	8000c38 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e037      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x46a>
 8001828:	e02f      	b.n	800188a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <HAL_RCC_OscConfig+0x4fc>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff fa02 	bl	8000c38 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff f9fe 	bl	8000c38 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e020      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x498>
 8001856:	e018      	b.n	800188a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e013      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_RCC_OscConfig+0x4f4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	429a      	cmp	r2, r3
 8001876:	d106      	bne.n	8001886 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	429a      	cmp	r2, r3
 8001884:	d001      	beq.n	800188a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	40007000 	.word	0x40007000
 800189c:	42420060 	.word	0x42420060

080018a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0d0      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b6a      	ldr	r3, [pc, #424]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d910      	bls.n	80018e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b67      	ldr	r3, [pc, #412]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 0207 	bic.w	r2, r3, #7
 80018ca:	4965      	ldr	r1, [pc, #404]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b63      	ldr	r3, [pc, #396]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0b8      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d020      	beq.n	8001932 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018fc:	4b59      	ldr	r3, [pc, #356]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	4a58      	ldr	r2, [pc, #352]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001906:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001914:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800191e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001920:	4b50      	ldr	r3, [pc, #320]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	494d      	ldr	r1, [pc, #308]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d040      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d115      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e07f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e073      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e06b      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197e:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f023 0203 	bic.w	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4936      	ldr	r1, [pc, #216]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001990:	f7ff f952 	bl	8000c38 <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	e00a      	b.n	80019ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001998:	f7ff f94e 	bl	8000c38 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e053      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 020c 	and.w	r2, r3, #12
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	429a      	cmp	r2, r3
 80019be:	d1eb      	bne.n	8001998 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d210      	bcs.n	80019f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 0207 	bic.w	r2, r3, #7
 80019d6:	4922      	ldr	r1, [pc, #136]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e032      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4916      	ldr	r1, [pc, #88]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	490e      	ldr	r1, [pc, #56]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a2e:	f000 f821 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001a32:	4601      	mov	r1, r0
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001a40:	5cd3      	ldrb	r3, [r2, r3]
 8001a42:	fa21 f303 	lsr.w	r3, r1, r3
 8001a46:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <HAL_RCC_ClockConfig+0x1cc>)
 8001a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1d0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f8b0 	bl	8000bb4 <HAL_InitTick>

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40022000 	.word	0x40022000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	08001e14 	.word	0x08001e14
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a74:	b490      	push	{r4, r7}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a7c:	1d3c      	adds	r4, r7, #4
 8001a7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a84:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a9e:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d002      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d003      	beq.n	8001aba <HAL_RCC_GetSysClockFreq+0x46>
 8001ab2:	e02d      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ab6:	623b      	str	r3, [r7, #32]
      break;
 8001ab8:	e02d      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	0c9b      	lsrs	r3, r3, #18
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001acc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d013      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	0c5b      	lsrs	r3, r3, #17
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001aec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	4a0f      	ldr	r2, [pc, #60]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001af2:	fb02 f203 	mul.w	r2, r2, r3
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
 8001afe:	e004      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b04:	fb02 f303 	mul.w	r3, r2, r3
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	623b      	str	r3, [r7, #32]
      break;
 8001b0e:	e002      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b12:	623b      	str	r3, [r7, #32]
      break;
 8001b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b16:	6a3b      	ldr	r3, [r7, #32]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc90      	pop	{r4, r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	08001e00 	.word	0x08001e00
 8001b28:	08001e10 	.word	0x08001e10
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	007a1200 	.word	0x007a1200
 8001b34:	003d0900 	.word	0x003d0900

08001b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	20000000 	.word	0x20000000

08001b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b50:	f7ff fff2 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b54:	4601      	mov	r1, r0
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08001e24 	.word	0x08001e24

08001b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b78:	f7ff ffde 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b7c:	4601      	mov	r1, r0
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	0adb      	lsrs	r3, r3, #11
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4a03      	ldr	r2, [pc, #12]	; (8001b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b8a:	5cd3      	ldrb	r3, [r2, r3]
 8001b8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	08001e24 	.word	0x08001e24

08001b9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <RCC_Delay+0x34>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <RCC_Delay+0x38>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	0a5b      	lsrs	r3, r3, #9
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bb8:	bf00      	nop
  }
  while (Delay --);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1e5a      	subs	r2, r3, #1
 8001bbe:	60fa      	str	r2, [r7, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f9      	bne.n	8001bb8 <RCC_Delay+0x1c>
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	10624dd3 	.word	0x10624dd3

08001bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e03f      	b.n	8001c6a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7fe ff52 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2224      	movs	r2, #36	; 0x24
 8001c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f829 	bl	8001c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001cae:	f023 030c 	bic.w	r3, r3, #12
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699a      	ldr	r2, [r3, #24]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2c      	ldr	r2, [pc, #176]	; (8001d88 <UART_SetConfig+0x114>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d103      	bne.n	8001ce4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cdc:	f7ff ff4a 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	e002      	b.n	8001cea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ce4:	f7ff ff32 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 8001ce8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009a      	lsls	r2, r3, #2
 8001cf4:	441a      	add	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d00:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <UART_SetConfig+0x118>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	0119      	lsls	r1, r3, #4
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	009a      	lsls	r2, r3, #2
 8001d14:	441a      	add	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <UART_SetConfig+0x118>)
 8001d22:	fba3 0302 	umull	r0, r3, r3, r2
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2064      	movs	r0, #100	; 0x64
 8001d2a:	fb00 f303 	mul.w	r3, r0, r3
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	3332      	adds	r3, #50	; 0x32
 8001d34:	4a15      	ldr	r2, [pc, #84]	; (8001d8c <UART_SetConfig+0x118>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d40:	4419      	add	r1, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	009a      	lsls	r2, r3, #2
 8001d4c:	441a      	add	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <UART_SetConfig+0x118>)
 8001d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2064      	movs	r0, #100	; 0x64
 8001d62:	fb00 f303 	mul.w	r3, r0, r3
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	3332      	adds	r3, #50	; 0x32
 8001d6c:	4a07      	ldr	r2, [pc, #28]	; (8001d8c <UART_SetConfig+0x118>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	f003 020f 	and.w	r2, r3, #15
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	440a      	add	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	51eb851f 	.word	0x51eb851f

08001d90 <__libc_init_array>:
 8001d90:	b570      	push	{r4, r5, r6, lr}
 8001d92:	2500      	movs	r5, #0
 8001d94:	4e0c      	ldr	r6, [pc, #48]	; (8001dc8 <__libc_init_array+0x38>)
 8001d96:	4c0d      	ldr	r4, [pc, #52]	; (8001dcc <__libc_init_array+0x3c>)
 8001d98:	1ba4      	subs	r4, r4, r6
 8001d9a:	10a4      	asrs	r4, r4, #2
 8001d9c:	42a5      	cmp	r5, r4
 8001d9e:	d109      	bne.n	8001db4 <__libc_init_array+0x24>
 8001da0:	f000 f822 	bl	8001de8 <_init>
 8001da4:	2500      	movs	r5, #0
 8001da6:	4e0a      	ldr	r6, [pc, #40]	; (8001dd0 <__libc_init_array+0x40>)
 8001da8:	4c0a      	ldr	r4, [pc, #40]	; (8001dd4 <__libc_init_array+0x44>)
 8001daa:	1ba4      	subs	r4, r4, r6
 8001dac:	10a4      	asrs	r4, r4, #2
 8001dae:	42a5      	cmp	r5, r4
 8001db0:	d105      	bne.n	8001dbe <__libc_init_array+0x2e>
 8001db2:	bd70      	pop	{r4, r5, r6, pc}
 8001db4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001db8:	4798      	blx	r3
 8001dba:	3501      	adds	r5, #1
 8001dbc:	e7ee      	b.n	8001d9c <__libc_init_array+0xc>
 8001dbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dc2:	4798      	blx	r3
 8001dc4:	3501      	adds	r5, #1
 8001dc6:	e7f2      	b.n	8001dae <__libc_init_array+0x1e>
 8001dc8:	08001e2c 	.word	0x08001e2c
 8001dcc:	08001e2c 	.word	0x08001e2c
 8001dd0:	08001e2c 	.word	0x08001e2c
 8001dd4:	08001e30 	.word	0x08001e30

08001dd8 <memset>:
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4402      	add	r2, r0
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d100      	bne.n	8001de2 <memset+0xa>
 8001de0:	4770      	bx	lr
 8001de2:	f803 1b01 	strb.w	r1, [r3], #1
 8001de6:	e7f9      	b.n	8001ddc <memset+0x4>

08001de8 <_init>:
 8001de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dea:	bf00      	nop
 8001dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dee:	bc08      	pop	{r3}
 8001df0:	469e      	mov	lr, r3
 8001df2:	4770      	bx	lr

08001df4 <_fini>:
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	bf00      	nop
 8001df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfa:	bc08      	pop	{r3}
 8001dfc:	469e      	mov	lr, r3
 8001dfe:	4770      	bx	lr
