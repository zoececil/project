
tftlcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002608  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002714  08002714  00012714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002740  08002740  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002740  08002740  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002740  08002740  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002740  08002740  00012740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002744  08002744  00012744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08002754  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002754  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da92  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000228b  00000000  00000000  0002dac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c00  00000000  00000000  0002fd58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  00030958  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000188b2  00000000  00000000  00031448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c3fb  00000000  00000000  00049cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000861f6  00000000  00000000  000560f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc2eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f80  00000000  00000000  000dc368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026fc 	.word	0x080026fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080026fc 	.word	0x080026fc

0800014c <tftlcdTest>:

#include "mycode.h"

void tftlcdTest(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	Test_Demo();
 8000150:	f000 fc66 	bl	8000a20 <Test_Demo>
}
 8000154:	bf00      	nop
 8000156:	bd80      	pop	{r7, pc}

08000158 <myDelayUS>:

extern UART_HandleTypeDef huart2;
static u32 fac_us=0;

void myDelayUS(u32 nus)
{
 8000158:	b480      	push	{r7}
 800015a:	b089      	sub	sp, #36	; 0x24
 800015c:	af00      	add	r7, sp, #0
 800015e:	6078      	str	r0, [r7, #4]
	u32 ticks;
	u32 told,tnow,tcnt=0;
 8000160:	2300      	movs	r3, #0
 8000162:	61bb      	str	r3, [r7, #24]
	u32 reload=SysTick->LOAD;
 8000164:	4b19      	ldr	r3, [pc, #100]	; (80001cc <myDelayUS+0x74>)
 8000166:	685b      	ldr	r3, [r3, #4]
 8000168:	617b      	str	r3, [r7, #20]
	ticks=nus*fac_us;
 800016a:	4b19      	ldr	r3, [pc, #100]	; (80001d0 <myDelayUS+0x78>)
 800016c:	681a      	ldr	r2, [r3, #0]
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	fb02 f303 	mul.w	r3, r2, r3
 8000174:	613b      	str	r3, [r7, #16]
	told=SysTick->VAL;
 8000176:	4b15      	ldr	r3, [pc, #84]	; (80001cc <myDelayUS+0x74>)
 8000178:	689b      	ldr	r3, [r3, #8]
 800017a:	61fb      	str	r3, [r7, #28]
	while(1)
	{
		tnow=SysTick->VAL;
 800017c:	4b13      	ldr	r3, [pc, #76]	; (80001cc <myDelayUS+0x74>)
 800017e:	689b      	ldr	r3, [r3, #8]
 8000180:	60fb      	str	r3, [r7, #12]
		if(tnow!=told)
 8000182:	68fa      	ldr	r2, [r7, #12]
 8000184:	69fb      	ldr	r3, [r7, #28]
 8000186:	429a      	cmp	r2, r3
 8000188:	d0f8      	beq.n	800017c <myDelayUS+0x24>
		{
			if(tnow<told)tcnt+=told-tnow;
 800018a:	68fa      	ldr	r2, [r7, #12]
 800018c:	69fb      	ldr	r3, [r7, #28]
 800018e:	429a      	cmp	r2, r3
 8000190:	d206      	bcs.n	80001a0 <myDelayUS+0x48>
 8000192:	69fa      	ldr	r2, [r7, #28]
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	1ad3      	subs	r3, r2, r3
 8000198:	69ba      	ldr	r2, [r7, #24]
 800019a:	4413      	add	r3, r2
 800019c:	61bb      	str	r3, [r7, #24]
 800019e:	e007      	b.n	80001b0 <myDelayUS+0x58>
			else tcnt+=reload-tnow+told;
 80001a0:	697a      	ldr	r2, [r7, #20]
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	1ad2      	subs	r2, r2, r3
 80001a6:	69fb      	ldr	r3, [r7, #28]
 80001a8:	4413      	add	r3, r2
 80001aa:	69ba      	ldr	r2, [r7, #24]
 80001ac:	4413      	add	r3, r2
 80001ae:	61bb      	str	r3, [r7, #24]
			told=tnow;
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	61fb      	str	r3, [r7, #28]
			if(tcnt>=ticks)break;
 80001b4:	69ba      	ldr	r2, [r7, #24]
 80001b6:	693b      	ldr	r3, [r7, #16]
 80001b8:	429a      	cmp	r2, r3
 80001ba:	d200      	bcs.n	80001be <myDelayUS+0x66>
		tnow=SysTick->VAL;
 80001bc:	e7de      	b.n	800017c <myDelayUS+0x24>
			if(tcnt>=ticks)break;
 80001be:	bf00      	nop
		}
	}
}
 80001c0:	bf00      	nop
 80001c2:	3724      	adds	r7, #36	; 0x24
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	e000e010 	.word	0xe000e010
 80001d0:	20000028 	.word	0x20000028

080001d4 <myDelayMS>:
void myDelayMS(u16 nms)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	80fb      	strh	r3, [r7, #6]
	u32 i;
	for(i=0;i<nms;i++) myDelayUS(1000);
 80001de:	2300      	movs	r3, #0
 80001e0:	60fb      	str	r3, [r7, #12]
 80001e2:	e006      	b.n	80001f2 <myDelayMS+0x1e>
 80001e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e8:	f7ff ffb6 	bl	8000158 <myDelayUS>
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	3301      	adds	r3, #1
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	88fb      	ldrh	r3, [r7, #6]
 80001f4:	68fa      	ldr	r2, [r7, #12]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d3f4      	bcc.n	80001e4 <myDelayMS+0x10>
}
 80001fa:	bf00      	nop
 80001fc:	3710      	adds	r7, #16
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
	...

08000204 <myDelayInit>:

void myDelayInit(u8 SYSCLK)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800020e:	2004      	movs	r0, #4
 8000210:	f001 f824 	bl	800125c <HAL_SYSTICK_CLKSourceConfig>
	fac_us=SYSCLK;
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	4a03      	ldr	r2, [pc, #12]	; (8000224 <myDelayInit+0x20>)
 8000218:	6013      	str	r3, [r2, #0]
}
 800021a:	bf00      	nop
 800021c:	3708      	adds	r7, #8
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000028 	.word	0x20000028

08000228 <spiTransmit>:
#ifdef mcu_stm32f1

extern SPI_HandleTypeDef hspi2;

void spiTransmit(unsigned char *pdata, unsigned int size)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi2,pdata,size,100);
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	b29a      	uxth	r2, r3
 8000236:	2364      	movs	r3, #100	; 0x64
 8000238:	6879      	ldr	r1, [r7, #4]
 800023a:	4803      	ldr	r0, [pc, #12]	; (8000248 <spiTransmit+0x20>)
 800023c:	f001 ff74 	bl	8002128 <HAL_SPI_Transmit>
}
 8000240:	bf00      	nop
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000080 	.word	0x20000080

0800024c <LCD_Init>:

#ifdef service_display_tftlcd
#include "tftlcd.h"

void LCD_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	LCD_Reset();
 8000250:	f000 f960 	bl	8000514 <LCD_Reset>

	LCD_WriteIndex(0X11);   //sleep out
 8000254:	2011      	movs	r0, #17
 8000256:	f000 f90f 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x00);
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f928 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XCF);   //power control B
 8000260:	20cf      	movs	r0, #207	; 0xcf
 8000262:	f000 f909 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x00);
 8000266:	2000      	movs	r0, #0
 8000268:	f000 f922 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0xC1);
 800026c:	20c1      	movs	r0, #193	; 0xc1
 800026e:	f000 f91f 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x30);
 8000272:	2030      	movs	r0, #48	; 0x30
 8000274:	f000 f91c 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XED);
 8000278:	20ed      	movs	r0, #237	; 0xed
 800027a:	f000 f8fd 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x64);
 800027e:	2064      	movs	r0, #100	; 0x64
 8000280:	f000 f916 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x03);
 8000284:	2003      	movs	r0, #3
 8000286:	f000 f913 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x12);
 800028a:	2012      	movs	r0, #18
 800028c:	f000 f910 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x81);
 8000290:	2081      	movs	r0, #129	; 0x81
 8000292:	f000 f90d 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XE8);
 8000296:	20e8      	movs	r0, #232	; 0xe8
 8000298:	f000 f8ee 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x85);
 800029c:	2085      	movs	r0, #133	; 0x85
 800029e:	f000 f907 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x11);
 80002a2:	2011      	movs	r0, #17
 80002a4:	f000 f904 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x78);
 80002a8:	2078      	movs	r0, #120	; 0x78
 80002aa:	f000 f901 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XF6);
 80002ae:	20f6      	movs	r0, #246	; 0xf6
 80002b0:	f000 f8e2 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x01);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f000 f8fb 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x30);
 80002ba:	2030      	movs	r0, #48	; 0x30
 80002bc:	f000 f8f8 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x00);
 80002c0:	2000      	movs	r0, #0
 80002c2:	f000 f8f5 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XCB);
 80002c6:	20cb      	movs	r0, #203	; 0xcb
 80002c8:	f000 f8d6 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x39);
 80002cc:	2039      	movs	r0, #57	; 0x39
 80002ce:	f000 f8ef 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x2C);
 80002d2:	202c      	movs	r0, #44	; 0x2c
 80002d4:	f000 f8ec 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x00);
 80002d8:	2000      	movs	r0, #0
 80002da:	f000 f8e9 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x34);
 80002de:	2034      	movs	r0, #52	; 0x34
 80002e0:	f000 f8e6 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x05);
 80002e4:	2005      	movs	r0, #5
 80002e6:	f000 f8e3 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XF7);
 80002ea:	20f7      	movs	r0, #247	; 0xf7
 80002ec:	f000 f8c4 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x20);
 80002f0:	2020      	movs	r0, #32
 80002f2:	f000 f8dd 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XEA);
 80002f6:	20ea      	movs	r0, #234	; 0xea
 80002f8:	f000 f8be 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x00);
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 f8d7 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x00);
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f8d4 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XC0);
 8000308:	20c0      	movs	r0, #192	; 0xc0
 800030a:	f000 f8b5 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x20);
 800030e:	2020      	movs	r0, #32
 8000310:	f000 f8ce 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XC1);
 8000314:	20c1      	movs	r0, #193	; 0xc1
 8000316:	f000 f8af 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x11);
 800031a:	2011      	movs	r0, #17
 800031c:	f000 f8c8 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XC5);
 8000320:	20c5      	movs	r0, #197	; 0xc5
 8000322:	f000 f8a9 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0x31);
 8000326:	2031      	movs	r0, #49	; 0x31
 8000328:	f000 f8c2 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0x3C);
 800032c:	203c      	movs	r0, #60	; 0x3c
 800032e:	f000 f8bf 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0XC7);
 8000332:	20c7      	movs	r0, #199	; 0xc7
 8000334:	f000 f8a0 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0xA9);
 8000338:	20a9      	movs	r0, #169	; 0xa9
 800033a:	f000 f8b9 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0X3A);
 800033e:	203a      	movs	r0, #58	; 0x3a
 8000340:	f000 f89a 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0X55);
 8000344:	2055      	movs	r0, #85	; 0x55
 8000346:	f000 f8b3 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0x36);
 800034a:	2036      	movs	r0, #54	; 0x36
 800034c:	f000 f894 	bl	8000478 <LCD_WriteIndex>
	#if Select_Horizontal
		LCD_WriteData8Bit(0xE8);
	#else
		LCD_WriteData8Bit(0x48);
 8000350:	2048      	movs	r0, #72	; 0x48
 8000352:	f000 f8ad 	bl	80004b0 <LCD_WriteData8Bit>
	#endif

	LCD_WriteIndex(0xB1);  /* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
 8000356:	20b1      	movs	r0, #177	; 0xb1
 8000358:	f000 f88e 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0X00);
 800035c:	2000      	movs	r0, #0
 800035e:	f000 f8a7 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X18);
 8000362:	2018      	movs	r0, #24
 8000364:	f000 f8a4 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0xB4);
 8000368:	20b4      	movs	r0, #180	; 0xb4
 800036a:	f000 f885 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0X00);
 800036e:	2000      	movs	r0, #0
 8000370:	f000 f89e 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X00);
 8000374:	2000      	movs	r0, #0
 8000376:	f000 f89b 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0xF2);  /* Enable 3G (F2h) */
 800037a:	20f2      	movs	r0, #242	; 0xf2
 800037c:	f000 f87c 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0X00);
 8000380:	2000      	movs	r0, #0
 8000382:	f000 f895 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0x26);  /* Gamma Set (26h) */
 8000386:	2026      	movs	r0, #38	; 0x26
 8000388:	f000 f876 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0X01);
 800038c:	2001      	movs	r0, #1
 800038e:	f000 f88f 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0xE0);  /* Positive Gamma Correction */
 8000392:	20e0      	movs	r0, #224	; 0xe0
 8000394:	f000 f870 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0X0F);
 8000398:	200f      	movs	r0, #15
 800039a:	f000 f889 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X17);
 800039e:	2017      	movs	r0, #23
 80003a0:	f000 f886 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X14);
 80003a4:	2014      	movs	r0, #20
 80003a6:	f000 f883 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X09);
 80003aa:	2009      	movs	r0, #9
 80003ac:	f000 f880 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X0C);
 80003b0:	200c      	movs	r0, #12
 80003b2:	f000 f87d 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X06);
 80003b6:	2006      	movs	r0, #6
 80003b8:	f000 f87a 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X43);
 80003bc:	2043      	movs	r0, #67	; 0x43
 80003be:	f000 f877 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X75);
 80003c2:	2075      	movs	r0, #117	; 0x75
 80003c4:	f000 f874 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X36);
 80003c8:	2036      	movs	r0, #54	; 0x36
 80003ca:	f000 f871 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X08);
 80003ce:	2008      	movs	r0, #8
 80003d0:	f000 f86e 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X13);
 80003d4:	2013      	movs	r0, #19
 80003d6:	f000 f86b 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X05);
 80003da:	2005      	movs	r0, #5
 80003dc:	f000 f868 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X10);
 80003e0:	2010      	movs	r0, #16
 80003e2:	f000 f865 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X0B);
 80003e6:	200b      	movs	r0, #11
 80003e8:	f000 f862 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X08);
 80003ec:	2008      	movs	r0, #8
 80003ee:	f000 f85f 	bl	80004b0 <LCD_WriteData8Bit>


	LCD_WriteIndex(0xE1);  /* Negative Gamma Correction (E1h) */
 80003f2:	20e1      	movs	r0, #225	; 0xe1
 80003f4:	f000 f840 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData8Bit(0X00);
 80003f8:	2000      	movs	r0, #0
 80003fa:	f000 f859 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X1F);
 80003fe:	201f      	movs	r0, #31
 8000400:	f000 f856 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X23);
 8000404:	2023      	movs	r0, #35	; 0x23
 8000406:	f000 f853 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X03);
 800040a:	2003      	movs	r0, #3
 800040c:	f000 f850 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X0E);
 8000410:	200e      	movs	r0, #14
 8000412:	f000 f84d 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X04);
 8000416:	2004      	movs	r0, #4
 8000418:	f000 f84a 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X39);
 800041c:	2039      	movs	r0, #57	; 0x39
 800041e:	f000 f847 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X25);
 8000422:	2025      	movs	r0, #37	; 0x25
 8000424:	f000 f844 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X4D);
 8000428:	204d      	movs	r0, #77	; 0x4d
 800042a:	f000 f841 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X06);
 800042e:	2006      	movs	r0, #6
 8000430:	f000 f83e 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X0D);
 8000434:	200d      	movs	r0, #13
 8000436:	f000 f83b 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X0B);
 800043a:	200b      	movs	r0, #11
 800043c:	f000 f838 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X33);
 8000440:	2033      	movs	r0, #51	; 0x33
 8000442:	f000 f835 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X37);
 8000446:	2037      	movs	r0, #55	; 0x37
 8000448:	f000 f832 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(0X0F);
 800044c:	200f      	movs	r0, #15
 800044e:	f000 f82f 	bl	80004b0 <LCD_WriteData8Bit>

	LCD_WriteIndex(0x29);  	/* Display ON (29h) */
 8000452:	2029      	movs	r0, #41	; 0x29
 8000454:	f000 f810 	bl	8000478 <LCD_WriteIndex>

}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}

0800045c <LCD_Write_spi>:
//      LCD_SCL_SET;
//      Data<<=1;
//	}
//}
void LCD_Write_spi(uint8_t data)//硬件spi
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]
	spiTransmit(&data,1);
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	2101      	movs	r1, #1
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff fedc 	bl	8000228 <spiTransmit>
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <LCD_WriteIndex>:
void LCD_WriteIndex(uint8_t command)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
	LCD_CS_CLR;
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <LCD_WriteIndex+0x34>)
 8000484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000488:	615a      	str	r2, [r3, #20]
	LCD_DC_CLR;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <LCD_WriteIndex+0x34>)
 800048c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000490:	615a      	str	r2, [r3, #20]
	LCD_Write_spi(command);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ffe1 	bl	800045c <LCD_Write_spi>
	LCD_CS_SET;
 800049a:	4b04      	ldr	r3, [pc, #16]	; (80004ac <LCD_WriteIndex+0x34>)
 800049c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004a0:	611a      	str	r2, [r3, #16]
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40010c00 	.word	0x40010c00

080004b0 <LCD_WriteData8Bit>:
void LCD_WriteData8Bit(uint8_t data)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	LCD_CS_CLR;
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <LCD_WriteData8Bit+0x34>)
 80004bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004c0:	615a      	str	r2, [r3, #20]
	LCD_DC_SET;
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <LCD_WriteData8Bit+0x34>)
 80004c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004c8:	611a      	str	r2, [r3, #16]
	LCD_Write_spi(data);
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ffc5 	bl	800045c <LCD_Write_spi>
	LCD_CS_SET;
 80004d2:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <LCD_WriteData8Bit+0x34>)
 80004d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004d8:	611a      	str	r2, [r3, #16]
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40010c00 	.word	0x40010c00

080004e8 <LCD_WriteData16Bit>:
void LCD_WriteData16Bit(uint16_t data)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	80fb      	strh	r3, [r7, #6]
	LCD_WriteData8Bit(data>>8);
 80004f2:	88fb      	ldrh	r3, [r7, #6]
 80004f4:	0a1b      	lsrs	r3, r3, #8
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ffd8 	bl	80004b0 <LCD_WriteData8Bit>
	LCD_WriteData8Bit(data);
 8000500:	88fb      	ldrh	r3, [r7, #6]
 8000502:	b2db      	uxtb	r3, r3
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ffd3 	bl	80004b0 <LCD_WriteData8Bit>
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <LCD_Reset>:
void LCD_Reset(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <LCD_Reset+0x24>)
 800051a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800051e:	615a      	str	r2, [r3, #20]
	myDelayMS(100);
 8000520:	2064      	movs	r0, #100	; 0x64
 8000522:	f7ff fe57 	bl	80001d4 <myDelayMS>
	LCD_RST_SET;
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <LCD_Reset+0x24>)
 8000528:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800052c:	611a      	str	r2, [r3, #16]
	myDelayMS(50);
 800052e:	2032      	movs	r0, #50	; 0x32
 8000530:	f7ff fe50 	bl	80001d4 <myDelayMS>
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40010c00 	.word	0x40010c00

0800053c <LCD_Clear>:
void LCD_Clear(uint16_t color)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
   unsigned int i;
   LCD_SetRegion(0,0,X_MAX_PIXEL-1,Y_MAX_PIXEL-1);
 8000546:	f240 133f 	movw	r3, #319	; 0x13f
 800054a:	22ef      	movs	r2, #239	; 0xef
 800054c:	2100      	movs	r1, #0
 800054e:	2000      	movs	r0, #0
 8000550:	f000 f883 	bl	800065a <LCD_SetRegion>
   LCD_CS_CLR;
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <LCD_Clear+0x64>)
 8000556:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800055a:	615a      	str	r2, [r3, #20]
   LCD_DC_SET;
 800055c:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <LCD_Clear+0x64>)
 800055e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000562:	611a      	str	r2, [r3, #16]
   for(i=0;i<X_MAX_PIXEL*Y_MAX_PIXEL;i++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e00e      	b.n	8000588 <LCD_Clear+0x4c>
   {
//	   LCD_WriteData16Bit(Color);
	   LCD_Write_spi(color>>8);
 800056a:	88fb      	ldrh	r3, [r7, #6]
 800056c:	0a1b      	lsrs	r3, r3, #8
 800056e:	b29b      	uxth	r3, r3
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ff72 	bl	800045c <LCD_Write_spi>
	   LCD_Write_spi(color);
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ff6d 	bl	800045c <LCD_Write_spi>
   for(i=0;i<X_MAX_PIXEL*Y_MAX_PIXEL;i++)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	3301      	adds	r3, #1
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800058e:	d3ec      	bcc.n	800056a <LCD_Clear+0x2e>
   }
		LCD_CS_SET;
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <LCD_Clear+0x64>)
 8000592:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000596:	611a      	str	r2, [r3, #16]
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40010c00 	.word	0x40010c00

080005a4 <LCD_Fill>:
void LCD_Fill(uint16_t x1, uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4604      	mov	r4, r0
 80005ac:	4608      	mov	r0, r1
 80005ae:	4611      	mov	r1, r2
 80005b0:	461a      	mov	r2, r3
 80005b2:	4623      	mov	r3, r4
 80005b4:	80fb      	strh	r3, [r7, #6]
 80005b6:	4603      	mov	r3, r0
 80005b8:	80bb      	strh	r3, [r7, #4]
 80005ba:	460b      	mov	r3, r1
 80005bc:	807b      	strh	r3, [r7, #2]
 80005be:	4613      	mov	r3, r2
 80005c0:	803b      	strh	r3, [r7, #0]
	   unsigned int i;
	   LCD_SetRegion(x1,y1,x2-1,y2-1);
 80005c2:	887b      	ldrh	r3, [r7, #2]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	883b      	ldrh	r3, [r7, #0]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	88b9      	ldrh	r1, [r7, #4]
 80005d0:	88f8      	ldrh	r0, [r7, #6]
 80005d2:	f000 f842 	bl	800065a <LCD_SetRegion>
	   LCD_CS_CLR;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <LCD_Fill+0x78>)
 80005d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005dc:	615a      	str	r2, [r3, #20]
	   LCD_DC_SET;
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <LCD_Fill+0x78>)
 80005e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005e4:	611a      	str	r2, [r3, #16]
	   for(i=0;i<x2*y2;i++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e006      	b.n	80005fa <LCD_Fill+0x56>
	   {
		   LCD_WriteData16Bit(color);
 80005ec:	8c3b      	ldrh	r3, [r7, #32]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff7a 	bl	80004e8 <LCD_WriteData16Bit>
	   for(i=0;i<x2*y2;i++)
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	3301      	adds	r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	887b      	ldrh	r3, [r7, #2]
 80005fc:	883a      	ldrh	r2, [r7, #0]
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	461a      	mov	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	4293      	cmp	r3, r2
 8000608:	d3f0      	bcc.n	80005ec <LCD_Fill+0x48>
//		   LCD_Write_spi(color>>8);
//		   LCD_Write_spi(color);
	   }
			LCD_CS_SET;
 800060a:	4b04      	ldr	r3, [pc, #16]	; (800061c <LCD_Fill+0x78>)
 800060c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000610:	611a      	str	r2, [r3, #16]
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bd90      	pop	{r4, r7, pc}
 800061a:	bf00      	nop
 800061c:	40010c00 	.word	0x40010c00

08000620 <LCD_SetXY>:
void LCD_SetXY(uint16_t Xpos, uint16_t Ypos)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	460a      	mov	r2, r1
 800062a:	80fb      	strh	r3, [r7, #6]
 800062c:	4613      	mov	r3, r2
 800062e:	80bb      	strh	r3, [r7, #4]
	LCD_WriteIndex(0x2A);
 8000630:	202a      	movs	r0, #42	; 0x2a
 8000632:	f7ff ff21 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData16Bit(Xpos);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff55 	bl	80004e8 <LCD_WriteData16Bit>
	LCD_WriteIndex(0x2B);
 800063e:	202b      	movs	r0, #43	; 0x2b
 8000640:	f7ff ff1a 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData16Bit(Ypos);
 8000644:	88bb      	ldrh	r3, [r7, #4]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ff4e 	bl	80004e8 <LCD_WriteData16Bit>
	LCD_WriteIndex(0x2C);
 800064c:	202c      	movs	r0, #44	; 0x2c
 800064e:	f7ff ff13 	bl	8000478 <LCD_WriteIndex>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <LCD_SetRegion>:

void LCD_SetRegion(uint16_t x1, uint16_t y1,uint16_t x2,uint16_t y2)
{
 800065a:	b590      	push	{r4, r7, lr}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	4604      	mov	r4, r0
 8000662:	4608      	mov	r0, r1
 8000664:	4611      	mov	r1, r2
 8000666:	461a      	mov	r2, r3
 8000668:	4623      	mov	r3, r4
 800066a:	80fb      	strh	r3, [r7, #6]
 800066c:	4603      	mov	r3, r0
 800066e:	80bb      	strh	r3, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	807b      	strh	r3, [r7, #2]
 8000674:	4613      	mov	r3, r2
 8000676:	803b      	strh	r3, [r7, #0]
	LCD_WriteIndex(0x2A);
 8000678:	202a      	movs	r0, #42	; 0x2a
 800067a:	f7ff fefd 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData16Bit(x1);
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff31 	bl	80004e8 <LCD_WriteData16Bit>
	LCD_WriteData16Bit(x2);
 8000686:	887b      	ldrh	r3, [r7, #2]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff2d 	bl	80004e8 <LCD_WriteData16Bit>
	LCD_WriteIndex(0x2B);
 800068e:	202b      	movs	r0, #43	; 0x2b
 8000690:	f7ff fef2 	bl	8000478 <LCD_WriteIndex>
	LCD_WriteData16Bit(y1);
 8000694:	88bb      	ldrh	r3, [r7, #4]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff26 	bl	80004e8 <LCD_WriteData16Bit>
	LCD_WriteData16Bit(y2);
 800069c:	883b      	ldrh	r3, [r7, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff22 	bl	80004e8 <LCD_WriteData16Bit>
	LCD_WriteIndex(0x2C);
 80006a4:	202c      	movs	r0, #44	; 0x2c
 80006a6:	f7ff fee7 	bl	8000478 <LCD_WriteIndex>
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd90      	pop	{r4, r7, pc}
	...

080006b4 <LCD_DisplayON>:
void LCD_DisplayON(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
//	LCD_WriteIndex(0x29);
	LCD_LED_SET;
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <LCD_DisplayON+0x14>)
 80006ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006be:	611a      	str	r2, [r3, #16]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	40010c00 	.word	0x40010c00

080006cc <LCD_DrawPoint>:
{
//	LCD_WriteIndex(0x28);
	LCD_LED_CLR;
}
void LCD_DrawPoint(uint16_t x,uint16_t y,uint16_t data)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	80fb      	strh	r3, [r7, #6]
 80006d6:	460b      	mov	r3, r1
 80006d8:	80bb      	strh	r3, [r7, #4]
 80006da:	4613      	mov	r3, r2
 80006dc:	807b      	strh	r3, [r7, #2]
	LCD_SetXY(x,y);
 80006de:	88ba      	ldrh	r2, [r7, #4]
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	4611      	mov	r1, r2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff9b 	bl	8000620 <LCD_SetXY>
	LCD_WriteData16Bit(data);
 80006ea:	887b      	ldrh	r3, [r7, #2]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fefb 	bl	80004e8 <LCD_WriteData16Bit>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <LCD_DrawLine>:
void LCD_DrawLine(uint16_t x0,uint16_t y0,uint16_t x1,uint16_t y1,uint16_t color)
{
 80006fa:	b590      	push	{r4, r7, lr}
 80006fc:	b08b      	sub	sp, #44	; 0x2c
 80006fe:	af00      	add	r7, sp, #0
 8000700:	4604      	mov	r4, r0
 8000702:	4608      	mov	r0, r1
 8000704:	4611      	mov	r1, r2
 8000706:	461a      	mov	r2, r3
 8000708:	4623      	mov	r3, r4
 800070a:	80fb      	strh	r3, [r7, #6]
 800070c:	4603      	mov	r3, r0
 800070e:	80bb      	strh	r3, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	807b      	strh	r3, [r7, #2]
 8000714:	4613      	mov	r3, r2
 8000716:	803b      	strh	r3, [r7, #0]
	int dx,dy,dx2,dy2,x_inc,y_inc,error,index;

	LCD_SetXY(x0,y0);
 8000718:	88ba      	ldrh	r2, [r7, #4]
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff7e 	bl	8000620 <LCD_SetXY>
	dx = x1-x0;
 8000724:	887a      	ldrh	r2, [r7, #2]
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
	dy = y1-y0;
 800072c:	883a      	ldrh	r2, [r7, #0]
 800072e:	88bb      	ldrh	r3, [r7, #4]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	623b      	str	r3, [r7, #32]

	if (dx>=0)
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	2b00      	cmp	r3, #0
 8000738:	db02      	blt.n	8000740 <LCD_DrawLine+0x46>
	{
		x_inc = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
 800073e:	e005      	b.n	800074c <LCD_DrawLine+0x52>
	}
	else
	{
		x_inc = -1;
 8000740:	f04f 33ff 	mov.w	r3, #4294967295
 8000744:	61fb      	str	r3, [r7, #28]
		dx = -dx;
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	425b      	negs	r3, r3
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (dy>=0)
 800074c:	6a3b      	ldr	r3, [r7, #32]
 800074e:	2b00      	cmp	r3, #0
 8000750:	db02      	blt.n	8000758 <LCD_DrawLine+0x5e>
	{
		y_inc = 1;
 8000752:	2301      	movs	r3, #1
 8000754:	61bb      	str	r3, [r7, #24]
 8000756:	e005      	b.n	8000764 <LCD_DrawLine+0x6a>
	}
	else
	{
		y_inc = -1;
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	61bb      	str	r3, [r7, #24]
		dy = -dy;
 800075e:	6a3b      	ldr	r3, [r7, #32]
 8000760:	425b      	negs	r3, r3
 8000762:	623b      	str	r3, [r7, #32]
	}

	dx2 = dx << 1;
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
	dy2 = dy << 1;
 800076a:	6a3b      	ldr	r3, [r7, #32]
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]

	if (dx > dy)
 8000770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000772:	6a3b      	ldr	r3, [r7, #32]
 8000774:	429a      	cmp	r2, r3
 8000776:	dd29      	ble.n	80007cc <LCD_DrawLine+0xd2>
	{
		error = dy2 - dx;
 8000778:	68ba      	ldr	r2, [r7, #8]
 800077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	617b      	str	r3, [r7, #20]
		for (index=0;index<=dx;index++)
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	e01d      	b.n	80007c2 <LCD_DrawLine+0xc8>
		{
			LCD_DrawPoint(x0, y0, color);
 8000786:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000788:	88b9      	ldrh	r1, [r7, #4]
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff9d 	bl	80006cc <LCD_DrawPoint>
			if (error >= 0)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db08      	blt.n	80007aa <LCD_DrawLine+0xb0>
			{
				error-=dx2;
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
				y0+=y_inc;
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	88bb      	ldrh	r3, [r7, #4]
 80007a6:	4413      	add	r3, r2
 80007a8:	80bb      	strh	r3, [r7, #4]
			}
			error+=dy2;
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	4413      	add	r3, r2
 80007b0:	617b      	str	r3, [r7, #20]
			x0+=x_inc;
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	4413      	add	r3, r2
 80007ba:	80fb      	strh	r3, [r7, #6]
		for (index=0;index<=dx;index++)
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	3301      	adds	r3, #1
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dddd      	ble.n	8000786 <LCD_DrawLine+0x8c>
			}
			error+=dx2;
			y0+=y_inc;
		}
	}
}
 80007ca:	e028      	b.n	800081e <LCD_DrawLine+0x124>
		error = dx2 - dy;
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	6a3b      	ldr	r3, [r7, #32]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
		for (index=0;index <= dy;index++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	e01d      	b.n	8000816 <LCD_DrawLine+0x11c>
			LCD_DrawPoint(x0, y0, color);
 80007da:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80007dc:	88b9      	ldrh	r1, [r7, #4]
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff73 	bl	80006cc <LCD_DrawPoint>
			if (error >= 0)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db08      	blt.n	80007fe <LCD_DrawLine+0x104>
				error-=dy2;
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	617b      	str	r3, [r7, #20]
				x0+=x_inc;
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	4413      	add	r3, r2
 80007fc:	80fb      	strh	r3, [r7, #6]
			error+=dx2;
 80007fe:	697a      	ldr	r2, [r7, #20]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	617b      	str	r3, [r7, #20]
			y0+=y_inc;
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	b29a      	uxth	r2, r3
 800080a:	88bb      	ldrh	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	80bb      	strh	r3, [r7, #4]
		for (index=0;index <= dy;index++)
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	3301      	adds	r3, #1
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	429a      	cmp	r2, r3
 800081c:	dddd      	ble.n	80007da <LCD_DrawLine+0xe0>
}
 800081e:	bf00      	nop
 8000820:	372c      	adds	r7, #44	; 0x2c
 8000822:	46bd      	mov	sp, r7
 8000824:	bd90      	pop	{r4, r7, pc}

08000826 <LCD_DrawCircle>:
void LCD_DrawCircle(uint16_t x,uint16_t y,uint16_t r,uint16_t fc)
{
 8000826:	b590      	push	{r4, r7, lr}
 8000828:	b085      	sub	sp, #20
 800082a:	af00      	add	r7, sp, #0
 800082c:	4604      	mov	r4, r0
 800082e:	4608      	mov	r0, r1
 8000830:	4611      	mov	r1, r2
 8000832:	461a      	mov	r2, r3
 8000834:	4623      	mov	r3, r4
 8000836:	80fb      	strh	r3, [r7, #6]
 8000838:	4603      	mov	r3, r0
 800083a:	80bb      	strh	r3, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	807b      	strh	r3, [r7, #2]
 8000840:	4613      	mov	r3, r2
 8000842:	803b      	strh	r3, [r7, #0]
	unsigned short a,b;
	int c;
	a=0,b=r,c=3-2*r;
 8000844:	2300      	movs	r3, #0
 8000846:	81fb      	strh	r3, [r7, #14]
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	81bb      	strh	r3, [r7, #12]
 800084c:	887b      	ldrh	r3, [r7, #2]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	f1c3 0303 	rsb	r3, r3, #3
 8000854:	60bb      	str	r3, [r7, #8]
	while(a<b)
 8000856:	e077      	b.n	8000948 <LCD_DrawCircle+0x122>
	{
		LCD_DrawPoint(x+a, y+b, fc);
 8000858:	88fa      	ldrh	r2, [r7, #6]
 800085a:	89fb      	ldrh	r3, [r7, #14]
 800085c:	4413      	add	r3, r2
 800085e:	b298      	uxth	r0, r3
 8000860:	88ba      	ldrh	r2, [r7, #4]
 8000862:	89bb      	ldrh	r3, [r7, #12]
 8000864:	4413      	add	r3, r2
 8000866:	b29b      	uxth	r3, r3
 8000868:	883a      	ldrh	r2, [r7, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	f7ff ff2e 	bl	80006cc <LCD_DrawPoint>
		LCD_DrawPoint(x-a, y+b, fc);
 8000870:	88fa      	ldrh	r2, [r7, #6]
 8000872:	89fb      	ldrh	r3, [r7, #14]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	b298      	uxth	r0, r3
 8000878:	88ba      	ldrh	r2, [r7, #4]
 800087a:	89bb      	ldrh	r3, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	b29b      	uxth	r3, r3
 8000880:	883a      	ldrh	r2, [r7, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	f7ff ff22 	bl	80006cc <LCD_DrawPoint>
		LCD_DrawPoint(x+a, y-b, fc);
 8000888:	88fa      	ldrh	r2, [r7, #6]
 800088a:	89fb      	ldrh	r3, [r7, #14]
 800088c:	4413      	add	r3, r2
 800088e:	b298      	uxth	r0, r3
 8000890:	88ba      	ldrh	r2, [r7, #4]
 8000892:	89bb      	ldrh	r3, [r7, #12]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	b29b      	uxth	r3, r3
 8000898:	883a      	ldrh	r2, [r7, #0]
 800089a:	4619      	mov	r1, r3
 800089c:	f7ff ff16 	bl	80006cc <LCD_DrawPoint>
		LCD_DrawPoint(x-a, y-b, fc);
 80008a0:	88fa      	ldrh	r2, [r7, #6]
 80008a2:	89fb      	ldrh	r3, [r7, #14]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	b298      	uxth	r0, r3
 80008a8:	88ba      	ldrh	r2, [r7, #4]
 80008aa:	89bb      	ldrh	r3, [r7, #12]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	883a      	ldrh	r2, [r7, #0]
 80008b2:	4619      	mov	r1, r3
 80008b4:	f7ff ff0a 	bl	80006cc <LCD_DrawPoint>
		LCD_DrawPoint(x+b, y+a, fc);
 80008b8:	88fa      	ldrh	r2, [r7, #6]
 80008ba:	89bb      	ldrh	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	b298      	uxth	r0, r3
 80008c0:	88ba      	ldrh	r2, [r7, #4]
 80008c2:	89fb      	ldrh	r3, [r7, #14]
 80008c4:	4413      	add	r3, r2
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	883a      	ldrh	r2, [r7, #0]
 80008ca:	4619      	mov	r1, r3
 80008cc:	f7ff fefe 	bl	80006cc <LCD_DrawPoint>
		LCD_DrawPoint(x-b, y+a, fc);
 80008d0:	88fa      	ldrh	r2, [r7, #6]
 80008d2:	89bb      	ldrh	r3, [r7, #12]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	b298      	uxth	r0, r3
 80008d8:	88ba      	ldrh	r2, [r7, #4]
 80008da:	89fb      	ldrh	r3, [r7, #14]
 80008dc:	4413      	add	r3, r2
 80008de:	b29b      	uxth	r3, r3
 80008e0:	883a      	ldrh	r2, [r7, #0]
 80008e2:	4619      	mov	r1, r3
 80008e4:	f7ff fef2 	bl	80006cc <LCD_DrawPoint>
		LCD_DrawPoint(x+b, y-a, fc);
 80008e8:	88fa      	ldrh	r2, [r7, #6]
 80008ea:	89bb      	ldrh	r3, [r7, #12]
 80008ec:	4413      	add	r3, r2
 80008ee:	b298      	uxth	r0, r3
 80008f0:	88ba      	ldrh	r2, [r7, #4]
 80008f2:	89fb      	ldrh	r3, [r7, #14]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	883a      	ldrh	r2, [r7, #0]
 80008fa:	4619      	mov	r1, r3
 80008fc:	f7ff fee6 	bl	80006cc <LCD_DrawPoint>
		LCD_DrawPoint(x-b, y-a, fc);
 8000900:	88fa      	ldrh	r2, [r7, #6]
 8000902:	89bb      	ldrh	r3, [r7, #12]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	b298      	uxth	r0, r3
 8000908:	88ba      	ldrh	r2, [r7, #4]
 800090a:	89fb      	ldrh	r3, [r7, #14]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	b29b      	uxth	r3, r3
 8000910:	883a      	ldrh	r2, [r7, #0]
 8000912:	4619      	mov	r1, r3
 8000914:	f7ff feda 	bl	80006cc <LCD_DrawPoint>

		if(c<0)
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	2b00      	cmp	r3, #0
 800091c:	da06      	bge.n	800092c <LCD_DrawCircle+0x106>
		{
			c=c+4*a+6;
 800091e:	89fb      	ldrh	r3, [r7, #14]
 8000920:	009a      	lsls	r2, r3, #2
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	4413      	add	r3, r2
 8000926:	3306      	adds	r3, #6
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	e00a      	b.n	8000942 <LCD_DrawCircle+0x11c>
		}
		else
		{
			c=c+4*(a-b)+10;
 800092c:	89fa      	ldrh	r2, [r7, #14]
 800092e:	89bb      	ldrh	r3, [r7, #12]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	009a      	lsls	r2, r3, #2
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4413      	add	r3, r2
 8000938:	330a      	adds	r3, #10
 800093a:	60bb      	str	r3, [r7, #8]
			b-=1;
 800093c:	89bb      	ldrh	r3, [r7, #12]
 800093e:	3b01      	subs	r3, #1
 8000940:	81bb      	strh	r3, [r7, #12]
		}
		a+=1;
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	3301      	adds	r3, #1
 8000946:	81fb      	strh	r3, [r7, #14]
	while(a<b)
 8000948:	89fa      	ldrh	r2, [r7, #14]
 800094a:	89bb      	ldrh	r3, [r7, #12]
 800094c:	429a      	cmp	r2, r3
 800094e:	d383      	bcc.n	8000858 <LCD_DrawCircle+0x32>
	}
	if (a==b)
 8000950:	89fa      	ldrh	r2, [r7, #14]
 8000952:	89bb      	ldrh	r3, [r7, #12]
 8000954:	429a      	cmp	r2, r3
 8000956:	d15f      	bne.n	8000a18 <LCD_DrawCircle+0x1f2>
	{
		LCD_DrawPoint(x+a, y+b, fc);
 8000958:	88fa      	ldrh	r2, [r7, #6]
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	4413      	add	r3, r2
 800095e:	b298      	uxth	r0, r3
 8000960:	88ba      	ldrh	r2, [r7, #4]
 8000962:	89bb      	ldrh	r3, [r7, #12]
 8000964:	4413      	add	r3, r2
 8000966:	b29b      	uxth	r3, r3
 8000968:	883a      	ldrh	r2, [r7, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	f7ff feae 	bl	80006cc <LCD_DrawPoint>
		LCD_DrawPoint(x-a, y+b, fc);
 8000970:	88fa      	ldrh	r2, [r7, #6]
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	b298      	uxth	r0, r3
 8000978:	88ba      	ldrh	r2, [r7, #4]
 800097a:	89bb      	ldrh	r3, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	b29b      	uxth	r3, r3
 8000980:	883a      	ldrh	r2, [r7, #0]
 8000982:	4619      	mov	r1, r3
 8000984:	f7ff fea2 	bl	80006cc <LCD_DrawPoint>
		LCD_DrawPoint(x+a, y-b, fc);
 8000988:	88fa      	ldrh	r2, [r7, #6]
 800098a:	89fb      	ldrh	r3, [r7, #14]
 800098c:	4413      	add	r3, r2
 800098e:	b298      	uxth	r0, r3
 8000990:	88ba      	ldrh	r2, [r7, #4]
 8000992:	89bb      	ldrh	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	b29b      	uxth	r3, r3
 8000998:	883a      	ldrh	r2, [r7, #0]
 800099a:	4619      	mov	r1, r3
 800099c:	f7ff fe96 	bl	80006cc <LCD_DrawPoint>
		LCD_DrawPoint(x-a, y-b, fc);
 80009a0:	88fa      	ldrh	r2, [r7, #6]
 80009a2:	89fb      	ldrh	r3, [r7, #14]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	b298      	uxth	r0, r3
 80009a8:	88ba      	ldrh	r2, [r7, #4]
 80009aa:	89bb      	ldrh	r3, [r7, #12]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	883a      	ldrh	r2, [r7, #0]
 80009b2:	4619      	mov	r1, r3
 80009b4:	f7ff fe8a 	bl	80006cc <LCD_DrawPoint>
		LCD_DrawPoint(x+b, y+a, fc);
 80009b8:	88fa      	ldrh	r2, [r7, #6]
 80009ba:	89bb      	ldrh	r3, [r7, #12]
 80009bc:	4413      	add	r3, r2
 80009be:	b298      	uxth	r0, r3
 80009c0:	88ba      	ldrh	r2, [r7, #4]
 80009c2:	89fb      	ldrh	r3, [r7, #14]
 80009c4:	4413      	add	r3, r2
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	883a      	ldrh	r2, [r7, #0]
 80009ca:	4619      	mov	r1, r3
 80009cc:	f7ff fe7e 	bl	80006cc <LCD_DrawPoint>
		LCD_DrawPoint(x-b, y+a, fc);
 80009d0:	88fa      	ldrh	r2, [r7, #6]
 80009d2:	89bb      	ldrh	r3, [r7, #12]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	b298      	uxth	r0, r3
 80009d8:	88ba      	ldrh	r2, [r7, #4]
 80009da:	89fb      	ldrh	r3, [r7, #14]
 80009dc:	4413      	add	r3, r2
 80009de:	b29b      	uxth	r3, r3
 80009e0:	883a      	ldrh	r2, [r7, #0]
 80009e2:	4619      	mov	r1, r3
 80009e4:	f7ff fe72 	bl	80006cc <LCD_DrawPoint>
		LCD_DrawPoint(x+b, y-a, fc);
 80009e8:	88fa      	ldrh	r2, [r7, #6]
 80009ea:	89bb      	ldrh	r3, [r7, #12]
 80009ec:	4413      	add	r3, r2
 80009ee:	b298      	uxth	r0, r3
 80009f0:	88ba      	ldrh	r2, [r7, #4]
 80009f2:	89fb      	ldrh	r3, [r7, #14]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	883a      	ldrh	r2, [r7, #0]
 80009fa:	4619      	mov	r1, r3
 80009fc:	f7ff fe66 	bl	80006cc <LCD_DrawPoint>
		LCD_DrawPoint(x-b, y-a, fc);
 8000a00:	88fa      	ldrh	r2, [r7, #6]
 8000a02:	89bb      	ldrh	r3, [r7, #12]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	b298      	uxth	r0, r3
 8000a08:	88ba      	ldrh	r2, [r7, #4]
 8000a0a:	89fb      	ldrh	r3, [r7, #14]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	883a      	ldrh	r2, [r7, #0]
 8000a12:	4619      	mov	r1, r3
 8000a14:	f7ff fe5a 	bl	80006cc <LCD_DrawPoint>
	}
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd90      	pop	{r4, r7, pc}

08000a20 <Test_Demo>:
		LCD_Clear(BLUE);  myDelayMS(500);
	}
}

void Test_Demo(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af02      	add	r7, sp, #8
	LCD_Init();
 8000a26:	f7ff fc11 	bl	800024c <LCD_Init>
	LCD_DisplayON();
 8000a2a:	f7ff fe43 	bl	80006b4 <LCD_DisplayON>
	LCD_Clear(WHITE);
 8000a2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a32:	f7ff fd83 	bl	800053c <LCD_Clear>
	LCD_DrawLine(200, 250, 50, 200, GBLUE);
 8000a36:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	23c8      	movs	r3, #200	; 0xc8
 8000a3e:	2232      	movs	r2, #50	; 0x32
 8000a40:	21fa      	movs	r1, #250	; 0xfa
 8000a42:	20c8      	movs	r0, #200	; 0xc8
 8000a44:	f7ff fe59 	bl	80006fa <LCD_DrawLine>
	LCD_DrawCircle(100, 100, 10, RED);
 8000a48:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000a4c:	220a      	movs	r2, #10
 8000a4e:	2164      	movs	r1, #100	; 0x64
 8000a50:	2064      	movs	r0, #100	; 0x64
 8000a52:	f7ff fee8 	bl	8000826 <LCD_DrawCircle>
	LCD_Fill(100, 100, 200, 200, GREEN);
 8000a56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	23c8      	movs	r3, #200	; 0xc8
 8000a5e:	22c8      	movs	r2, #200	; 0xc8
 8000a60:	2164      	movs	r1, #100	; 0x64
 8000a62:	2064      	movs	r0, #100	; 0x64
 8000a64:	f7ff fd9e 	bl	80005a4 <LCD_Fill>
	LCD_SetRegion(0,0,X_MAX_PIXEL-1,Y_MAX_PIXEL-1);
 8000a68:	f240 133f 	movw	r3, #319	; 0x13f
 8000a6c:	22ef      	movs	r2, #239	; 0xef
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff fdf2 	bl	800065a <LCD_SetRegion>
	LCD_DrawLine(50, 50, 200, 250, RED);
 8000a76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	23fa      	movs	r3, #250	; 0xfa
 8000a7e:	22c8      	movs	r2, #200	; 0xc8
 8000a80:	2132      	movs	r1, #50	; 0x32
 8000a82:	2032      	movs	r0, #50	; 0x32
 8000a84:	f7ff fe39 	bl	80006fa <LCD_DrawLine>
	LCD_DrawLine(200, 50, 50, 250, BLUE);
 8000a88:	231f      	movs	r3, #31
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	23fa      	movs	r3, #250	; 0xfa
 8000a8e:	2232      	movs	r2, #50	; 0x32
 8000a90:	2132      	movs	r1, #50	; 0x32
 8000a92:	20c8      	movs	r0, #200	; 0xc8
 8000a94:	f7ff fe31 	bl	80006fa <LCD_DrawLine>
	LCD_DrawLine(200, 250, 50, 250, BLUE);
 8000a98:	231f      	movs	r3, #31
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	23fa      	movs	r3, #250	; 0xfa
 8000a9e:	2232      	movs	r2, #50	; 0x32
 8000aa0:	21fa      	movs	r1, #250	; 0xfa
 8000aa2:	20c8      	movs	r0, #200	; 0xc8
 8000aa4:	f7ff fe29 	bl	80006fa <LCD_DrawLine>


	while(1){
 8000aa8:	e7fe      	b.n	8000aa8 <Test_Demo+0x88>
	...

08000aac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_GPIO_Init+0x90>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <MX_GPIO_Init+0x90>)
 8000ac6:	f043 0320 	orr.w	r3, r3, #32
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_GPIO_Init+0x90>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0320 	and.w	r3, r3, #32
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_GPIO_Init+0x90>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <MX_GPIO_Init+0x90>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_GPIO_Init+0x90>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_GPIO_Init+0x90>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <MX_GPIO_Init+0x90>)
 8000af6:	f043 0308 	orr.w	r3, r3, #8
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_GPIO_Init+0x90>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0308 	and.w	r3, r3, #8
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_9, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_GPIO_Init+0x94>)
 8000b10:	f000 fd1a 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 PB12 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_9;
 8000b14:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b26:	f107 0310 	add.w	r3, r7, #16
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_GPIO_Init+0x94>)
 8000b2e:	f000 fbb1 	bl	8001294 <HAL_GPIO_Init>

}
 8000b32:	bf00      	nop
 8000b34:	3720      	adds	r7, #32
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010c00 	.word	0x40010c00

08000b44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b4a:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <MX_I2C1_Init+0x54>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b50:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_I2C1_Init+0x58>)
 8000b52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b82:	f000 fcf9 	bl	8001578 <HAL_I2C_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b8c:	f000 f89f 	bl	8000cce <Error_Handler>
  }

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000002c 	.word	0x2000002c
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	000186a0 	.word	0x000186a0

08000ba0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <HAL_I2C_MspInit+0x70>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d123      	bne.n	8000c08 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_I2C_MspInit+0x74>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <HAL_I2C_MspInit+0x74>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_I2C_MspInit+0x74>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bd8:	23c0      	movs	r3, #192	; 0xc0
 8000bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bdc:	2312      	movs	r3, #18
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4619      	mov	r1, r3
 8000bea:	480b      	ldr	r0, [pc, #44]	; (8000c18 <HAL_I2C_MspInit+0x78>)
 8000bec:	f000 fb52 	bl	8001294 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_I2C_MspInit+0x74>)
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <HAL_I2C_MspInit+0x74>)
 8000bf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfa:	61d3      	str	r3, [r2, #28]
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_I2C_MspInit+0x74>)
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40005400 	.word	0x40005400
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010c00 	.word	0x40010c00

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f000 f9d6 	bl	8000fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f80e 	bl	8000c44 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  myDelayInit(72);
 8000c28:	2048      	movs	r0, #72	; 0x48
 8000c2a:	f7ff faeb 	bl	8000204 <myDelayInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f7ff ff3d 	bl	8000aac <MX_GPIO_Init>
  MX_SPI2_Init();
 8000c32:	f000 f851 	bl	8000cd8 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000c36:	f7ff ff85 	bl	8000b44 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000c3a:	f000 f92f 	bl	8000e9c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  tftlcdTest();
 8000c3e:	f7ff fa85 	bl	800014c <tftlcdTest>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <main+0x26>

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b090      	sub	sp, #64	; 0x40
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0318 	add.w	r3, r7, #24
 8000c4e:	2228      	movs	r2, #40	; 0x28
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 fd4a 	bl	80026ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c66:	2301      	movs	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c82:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c88:	f107 0318 	add.w	r3, r7, #24
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fdab 	bl	80017e8 <HAL_RCC_OscConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c98:	f000 f819 	bl	8000cce <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 f816 	bl	8001ce8 <HAL_RCC_ClockConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cc2:	f000 f804 	bl	8000cce <Error_Handler>
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3740      	adds	r7, #64	; 0x40
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd2:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <Error_Handler+0x6>
	...

08000cd8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_SPI2_Init+0x64>)
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <MX_SPI2_Init+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <MX_SPI2_Init+0x64>)
 8000ce4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ce8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_SPI2_Init+0x64>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_SPI2_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_SPI2_Init+0x64>)
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_SPI2_Init+0x64>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_SPI2_Init+0x64>)
 8000d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_SPI2_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_SPI2_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_SPI2_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_SPI2_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_SPI2_Init+0x64>)
 8000d24:	220a      	movs	r2, #10
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_SPI2_Init+0x64>)
 8000d2a:	f001 f979 	bl	8002020 <HAL_SPI_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d34:	f7ff ffcb 	bl	8000cce <Error_Handler>
  }

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000080 	.word	0x20000080
 8000d40:	40003800 	.word	0x40003800

08000d44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	; (8000dd0 <HAL_SPI_MspInit+0x8c>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d131      	bne.n	8000dc8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_SPI_MspInit+0x90>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	4a1a      	ldr	r2, [pc, #104]	; (8000dd4 <HAL_SPI_MspInit+0x90>)
 8000d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6e:	61d3      	str	r3, [r2, #28]
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_SPI_MspInit+0x90>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_SPI_MspInit+0x90>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <HAL_SPI_MspInit+0x90>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_SPI_MspInit+0x90>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000d94:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000d98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <HAL_SPI_MspInit+0x94>)
 8000daa:	f000 fa73 	bl	8001294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000dae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000db2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <HAL_SPI_MspInit+0x94>)
 8000dc4:	f000 fa66 	bl	8001294 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000dc8:	bf00      	nop
 8000dca:	3720      	adds	r7, #32
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40003800 	.word	0x40003800
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_MspInit+0x5c>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_MspInit+0x5c>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6193      	str	r3, [r2, #24]
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_MspInit+0x5c>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_MspInit+0x5c>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_MspInit+0x5c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	61d3      	str	r3, [r2, #28]
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_MspInit+0x5c>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_MspInit+0x60>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_MspInit+0x60>)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010000 	.word	0x40010000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e86:	f000 f8e9 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
	...

08000e9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <MX_USART2_UART_Init+0x50>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	f001 fb0a 	bl	80024ec <HAL_UART_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ede:	f7ff fef6 	bl	8000cce <Error_Handler>
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000d8 	.word	0x200000d8
 8000eec:	40004400 	.word	0x40004400

08000ef0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <HAL_UART_MspInit+0x88>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d12f      	bne.n	8000f70 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_UART_MspInit+0x8c>)
 8000f12:	69db      	ldr	r3, [r3, #28]
 8000f14:	4a19      	ldr	r2, [pc, #100]	; (8000f7c <HAL_UART_MspInit+0x8c>)
 8000f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1a:	61d3      	str	r3, [r2, #28]
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_UART_MspInit+0x8c>)
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_UART_MspInit+0x8c>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <HAL_UART_MspInit+0x8c>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_UART_MspInit+0x8c>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f40:	2304      	movs	r3, #4
 8000f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	4619      	mov	r1, r3
 8000f52:	480b      	ldr	r0, [pc, #44]	; (8000f80 <HAL_UART_MspInit+0x90>)
 8000f54:	f000 f99e 	bl	8001294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <HAL_UART_MspInit+0x90>)
 8000f6c:	f000 f992 	bl	8001294 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40004400 	.word	0x40004400
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010800 	.word	0x40010800

08000f84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f84:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f86:	e003      	b.n	8000f90 <LoopCopyDataInit>

08000f88 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f8a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f8c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f8e:	3104      	adds	r1, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f90:	480a      	ldr	r0, [pc, #40]	; (8000fbc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f94:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f96:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f98:	d3f6      	bcc.n	8000f88 <CopyDataInit>
  ldr r2, =_sbss
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f9c:	e002      	b.n	8000fa4 <LoopFillZerobss>

08000f9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fa0:	f842 3b04 	str.w	r3, [r2], #4

08000fa4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fa6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fa8:	d3f9      	bcc.n	8000f9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000faa:	f7ff ff70 	bl	8000e8e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fae:	f001 fb79 	bl	80026a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fb2:	f7ff fe33 	bl	8000c1c <main>
  bx lr
 8000fb6:	4770      	bx	lr
  ldr r3, =_sidata
 8000fb8:	08002748 	.word	0x08002748
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000fc4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000fc8:	2000011c 	.word	0x2000011c

08000fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC1_2_IRQHandler>
	...

08000fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x28>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x28>)
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f907 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f808 	bl	8000ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fef6 	bl	8000ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40022000 	.word	0x40022000

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x54>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x58>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	fbb3 f3f1 	udiv	r3, r3, r1
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f911 	bl	8001242 <HAL_SYSTICK_Config>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e00e      	b.n	8001048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d80a      	bhi.n	8001046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f000 f8e7 	bl	800120a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_InitTick+0x5c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e000      	b.n	8001048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000000 	.word	0x20000000
 8001054:	20000008 	.word	0x20000008
 8001058:	20000004 	.word	0x20000004

0800105c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_IncTick+0x1c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_IncTick+0x20>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a03      	ldr	r2, [pc, #12]	; (800107c <HAL_IncTick+0x20>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	20000008 	.word	0x20000008
 800107c:	20000118 	.word	0x20000118

08001080 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b02      	ldr	r3, [pc, #8]	; (8001090 <HAL_GetTick+0x10>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	20000118 	.word	0x20000118

08001094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	; (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	; (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f7ff ff90 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff49 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff5e 	bl	80010dc <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff90 	bl	800114c <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5f 	bl	80010f8 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffb0 	bl	80011b0 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b04      	cmp	r3, #4
 8001268:	d106      	bne.n	8001278 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001276:	e005      	b.n	8001284 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800127e:	f023 0304 	bic.w	r3, r3, #4
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b08b      	sub	sp, #44	; 0x2c
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a6:	e127      	b.n	80014f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012a8:	2201      	movs	r2, #1
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f040 8116 	bne.w	80014f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b12      	cmp	r3, #18
 80012cc:	d034      	beq.n	8001338 <HAL_GPIO_Init+0xa4>
 80012ce:	2b12      	cmp	r3, #18
 80012d0:	d80d      	bhi.n	80012ee <HAL_GPIO_Init+0x5a>
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d02b      	beq.n	800132e <HAL_GPIO_Init+0x9a>
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d804      	bhi.n	80012e4 <HAL_GPIO_Init+0x50>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d031      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d01c      	beq.n	800131c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012e2:	e048      	b.n	8001376 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d043      	beq.n	8001370 <HAL_GPIO_Init+0xdc>
 80012e8:	2b11      	cmp	r3, #17
 80012ea:	d01b      	beq.n	8001324 <HAL_GPIO_Init+0x90>
          break;
 80012ec:	e043      	b.n	8001376 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012ee:	4a89      	ldr	r2, [pc, #548]	; (8001514 <HAL_GPIO_Init+0x280>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d026      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 80012f4:	4a87      	ldr	r2, [pc, #540]	; (8001514 <HAL_GPIO_Init+0x280>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d806      	bhi.n	8001308 <HAL_GPIO_Init+0x74>
 80012fa:	4a87      	ldr	r2, [pc, #540]	; (8001518 <HAL_GPIO_Init+0x284>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d020      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 8001300:	4a86      	ldr	r2, [pc, #536]	; (800151c <HAL_GPIO_Init+0x288>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d01d      	beq.n	8001342 <HAL_GPIO_Init+0xae>
          break;
 8001306:	e036      	b.n	8001376 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001308:	4a85      	ldr	r2, [pc, #532]	; (8001520 <HAL_GPIO_Init+0x28c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d019      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 800130e:	4a85      	ldr	r2, [pc, #532]	; (8001524 <HAL_GPIO_Init+0x290>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d016      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 8001314:	4a84      	ldr	r2, [pc, #528]	; (8001528 <HAL_GPIO_Init+0x294>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0xae>
          break;
 800131a:	e02c      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e028      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	3304      	adds	r3, #4
 800132a:	623b      	str	r3, [r7, #32]
          break;
 800132c:	e023      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	3308      	adds	r3, #8
 8001334:	623b      	str	r3, [r7, #32]
          break;
 8001336:	e01e      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	330c      	adds	r3, #12
 800133e:	623b      	str	r3, [r7, #32]
          break;
 8001340:	e019      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d102      	bne.n	8001350 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800134a:	2304      	movs	r3, #4
 800134c:	623b      	str	r3, [r7, #32]
          break;
 800134e:	e012      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d105      	bne.n	8001364 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001358:	2308      	movs	r3, #8
 800135a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	611a      	str	r2, [r3, #16]
          break;
 8001362:	e008      	b.n	8001376 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001364:	2308      	movs	r3, #8
 8001366:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	615a      	str	r2, [r3, #20]
          break;
 800136e:	e002      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2bff      	cmp	r3, #255	; 0xff
 800137a:	d801      	bhi.n	8001380 <HAL_GPIO_Init+0xec>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	e001      	b.n	8001384 <HAL_GPIO_Init+0xf0>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3304      	adds	r3, #4
 8001384:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	2bff      	cmp	r3, #255	; 0xff
 800138a:	d802      	bhi.n	8001392 <HAL_GPIO_Init+0xfe>
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x104>
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	3b08      	subs	r3, #8
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	210f      	movs	r1, #15
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	401a      	ands	r2, r3
 80013aa:	6a39      	ldr	r1, [r7, #32]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	431a      	orrs	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 8096 	beq.w	80014f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c6:	4b59      	ldr	r3, [pc, #356]	; (800152c <HAL_GPIO_Init+0x298>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4a58      	ldr	r2, [pc, #352]	; (800152c <HAL_GPIO_Init+0x298>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6193      	str	r3, [r2, #24]
 80013d2:	4b56      	ldr	r3, [pc, #344]	; (800152c <HAL_GPIO_Init+0x298>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013de:	4a54      	ldr	r2, [pc, #336]	; (8001530 <HAL_GPIO_Init+0x29c>)
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4b      	ldr	r2, [pc, #300]	; (8001534 <HAL_GPIO_Init+0x2a0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0x19e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4a      	ldr	r2, [pc, #296]	; (8001538 <HAL_GPIO_Init+0x2a4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00d      	beq.n	800142e <HAL_GPIO_Init+0x19a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a49      	ldr	r2, [pc, #292]	; (800153c <HAL_GPIO_Init+0x2a8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x196>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a48      	ldr	r2, [pc, #288]	; (8001540 <HAL_GPIO_Init+0x2ac>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_GPIO_Init+0x192>
 8001422:	2303      	movs	r3, #3
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 8001426:	2304      	movs	r3, #4
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 8001432:	2300      	movs	r3, #0
 8001434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001444:	493a      	ldr	r1, [pc, #232]	; (8001530 <HAL_GPIO_Init+0x29c>)
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4938      	ldr	r1, [pc, #224]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
 800146a:	e006      	b.n	800147a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	43db      	mvns	r3, r3
 8001474:	4933      	ldr	r1, [pc, #204]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001476:	4013      	ands	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001486:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	492e      	ldr	r1, [pc, #184]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
 8001492:	e006      	b.n	80014a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	43db      	mvns	r3, r3
 800149c:	4929      	ldr	r1, [pc, #164]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 800149e:	4013      	ands	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	4924      	ldr	r1, [pc, #144]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
 80014ba:	e006      	b.n	80014ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	491f      	ldr	r1, [pc, #124]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	491a      	ldr	r1, [pc, #104]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	60cb      	str	r3, [r1, #12]
 80014e2:	e006      	b.n	80014f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	4915      	ldr	r1, [pc, #84]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	3301      	adds	r3, #1
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	f47f aed0 	bne.w	80012a8 <HAL_GPIO_Init+0x14>
  }
}
 8001508:	bf00      	nop
 800150a:	372c      	adds	r7, #44	; 0x2c
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	10210000 	.word	0x10210000
 8001518:	10110000 	.word	0x10110000
 800151c:	10120000 	.word	0x10120000
 8001520:	10310000 	.word	0x10310000
 8001524:	10320000 	.word	0x10320000
 8001528:	10220000 	.word	0x10220000
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000
 8001534:	40010800 	.word	0x40010800
 8001538:	40010c00 	.word	0x40010c00
 800153c:	40011000 	.word	0x40011000
 8001540:	40011400 	.word	0x40011400
 8001544:	40010400 	.word	0x40010400

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	611a      	str	r2, [r3, #16]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e11f      	b.n	80017ca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d106      	bne.n	80015a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fafe 	bl	8000ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2224      	movs	r2, #36	; 0x24
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015dc:	f000 fcda 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 80015e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a7b      	ldr	r2, [pc, #492]	; (80017d4 <HAL_I2C_Init+0x25c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d807      	bhi.n	80015fc <HAL_I2C_Init+0x84>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4a7a      	ldr	r2, [pc, #488]	; (80017d8 <HAL_I2C_Init+0x260>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	bf94      	ite	ls
 80015f4:	2301      	movls	r3, #1
 80015f6:	2300      	movhi	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	e006      	b.n	800160a <HAL_I2C_Init+0x92>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4a77      	ldr	r2, [pc, #476]	; (80017dc <HAL_I2C_Init+0x264>)
 8001600:	4293      	cmp	r3, r2
 8001602:	bf94      	ite	ls
 8001604:	2301      	movls	r3, #1
 8001606:	2300      	movhi	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0db      	b.n	80017ca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4a72      	ldr	r2, [pc, #456]	; (80017e0 <HAL_I2C_Init+0x268>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0c9b      	lsrs	r3, r3, #18
 800161c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	430a      	orrs	r2, r1
 8001630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a64      	ldr	r2, [pc, #400]	; (80017d4 <HAL_I2C_Init+0x25c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d802      	bhi.n	800164c <HAL_I2C_Init+0xd4>
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	3301      	adds	r3, #1
 800164a:	e009      	b.n	8001660 <HAL_I2C_Init+0xe8>
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	4a63      	ldr	r2, [pc, #396]	; (80017e4 <HAL_I2C_Init+0x26c>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	3301      	adds	r3, #1
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	430b      	orrs	r3, r1
 8001666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001672:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4956      	ldr	r1, [pc, #344]	; (80017d4 <HAL_I2C_Init+0x25c>)
 800167c:	428b      	cmp	r3, r1
 800167e:	d80d      	bhi.n	800169c <HAL_I2C_Init+0x124>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1e59      	subs	r1, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fbb1 f3f3 	udiv	r3, r1, r3
 800168e:	3301      	adds	r3, #1
 8001690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001694:	2b04      	cmp	r3, #4
 8001696:	bf38      	it	cc
 8001698:	2304      	movcc	r3, #4
 800169a:	e04f      	b.n	800173c <HAL_I2C_Init+0x1c4>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d111      	bne.n	80016c8 <HAL_I2C_Init+0x150>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1e58      	subs	r0, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	440b      	add	r3, r1
 80016b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	e012      	b.n	80016ee <HAL_I2C_Init+0x176>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1e58      	subs	r0, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	0099      	lsls	r1, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	fbb0 f3f3 	udiv	r3, r0, r3
 80016de:	3301      	adds	r3, #1
 80016e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_I2C_Init+0x17e>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e022      	b.n	800173c <HAL_I2C_Init+0x1c4>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10e      	bne.n	800171c <HAL_I2C_Init+0x1a4>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1e58      	subs	r0, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6859      	ldr	r1, [r3, #4]
 8001706:	460b      	mov	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	440b      	add	r3, r1
 800170c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001710:	3301      	adds	r3, #1
 8001712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171a:	e00f      	b.n	800173c <HAL_I2C_Init+0x1c4>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1e58      	subs	r0, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	0099      	lsls	r1, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001732:	3301      	adds	r3, #1
 8001734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	6809      	ldr	r1, [r1, #0]
 8001740:	4313      	orrs	r3, r2
 8001742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69da      	ldr	r2, [r3, #28]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800176a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6911      	ldr	r1, [r2, #16]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68d2      	ldr	r2, [r2, #12]
 8001776:	4311      	orrs	r1, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	430b      	orrs	r3, r1
 800177e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2220      	movs	r2, #32
 80017b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	000186a0 	.word	0x000186a0
 80017d8:	001e847f 	.word	0x001e847f
 80017dc:	003d08ff 	.word	0x003d08ff
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	10624dd3 	.word	0x10624dd3

080017e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e26c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 8087 	beq.w	8001916 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001808:	4b92      	ldr	r3, [pc, #584]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b04      	cmp	r3, #4
 8001812:	d00c      	beq.n	800182e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001814:	4b8f      	ldr	r3, [pc, #572]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b08      	cmp	r3, #8
 800181e:	d112      	bne.n	8001846 <HAL_RCC_OscConfig+0x5e>
 8001820:	4b8c      	ldr	r3, [pc, #560]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182c:	d10b      	bne.n	8001846 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182e:	4b89      	ldr	r3, [pc, #548]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d06c      	beq.n	8001914 <HAL_RCC_OscConfig+0x12c>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d168      	bne.n	8001914 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e246      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184e:	d106      	bne.n	800185e <HAL_RCC_OscConfig+0x76>
 8001850:	4b80      	ldr	r3, [pc, #512]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a7f      	ldr	r2, [pc, #508]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	e02e      	b.n	80018bc <HAL_RCC_OscConfig+0xd4>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0x98>
 8001866:	4b7b      	ldr	r3, [pc, #492]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a7a      	ldr	r2, [pc, #488]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 800186c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b78      	ldr	r3, [pc, #480]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a77      	ldr	r2, [pc, #476]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e01d      	b.n	80018bc <HAL_RCC_OscConfig+0xd4>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0xbc>
 800188a:	4b72      	ldr	r3, [pc, #456]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a71      	ldr	r2, [pc, #452]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b6f      	ldr	r3, [pc, #444]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a6e      	ldr	r2, [pc, #440]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e00b      	b.n	80018bc <HAL_RCC_OscConfig+0xd4>
 80018a4:	4b6b      	ldr	r3, [pc, #428]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a6a      	ldr	r2, [pc, #424]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	4b68      	ldr	r3, [pc, #416]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a67      	ldr	r2, [pc, #412]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d013      	beq.n	80018ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fbdc 	bl	8001080 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff fbd8 	bl	8001080 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e1fa      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b5d      	ldr	r3, [pc, #372]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0xe4>
 80018ea:	e014      	b.n	8001916 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fbc8 	bl	8001080 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff fbc4 	bl	8001080 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e1e6      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x10c>
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d063      	beq.n	80019ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001922:	4b4c      	ldr	r3, [pc, #304]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800192e:	4b49      	ldr	r3, [pc, #292]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b08      	cmp	r3, #8
 8001938:	d11c      	bne.n	8001974 <HAL_RCC_OscConfig+0x18c>
 800193a:	4b46      	ldr	r3, [pc, #280]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d116      	bne.n	8001974 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d005      	beq.n	800195e <HAL_RCC_OscConfig+0x176>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d001      	beq.n	800195e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e1ba      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195e:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4939      	ldr	r1, [pc, #228]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	e03a      	b.n	80019ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800197c:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <HAL_RCC_OscConfig+0x270>)
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7ff fb7d 	bl	8001080 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198a:	f7ff fb79 	bl	8001080 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e19b      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199c:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a8:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4927      	ldr	r1, [pc, #156]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
 80019bc:	e015      	b.n	80019ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <HAL_RCC_OscConfig+0x270>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff fb5c 	bl	8001080 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019cc:	f7ff fb58 	bl	8001080 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e17a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d03a      	beq.n	8001a6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d019      	beq.n	8001a32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_RCC_OscConfig+0x274>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7ff fb3c 	bl	8001080 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fb38 	bl	8001080 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e15a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f000 fada 	bl	8001fe4 <RCC_Delay>
 8001a30:	e01c      	b.n	8001a6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_RCC_OscConfig+0x274>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a38:	f7ff fb22 	bl	8001080 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3e:	e00f      	b.n	8001a60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a40:	f7ff fb1e 	bl	8001080 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d908      	bls.n	8001a60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e140      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	42420000 	.word	0x42420000
 8001a5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	4b9e      	ldr	r3, [pc, #632]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1e9      	bne.n	8001a40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80a6 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7e:	4b97      	ldr	r3, [pc, #604]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10d      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b94      	ldr	r3, [pc, #592]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a93      	ldr	r2, [pc, #588]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	61d3      	str	r3, [r2, #28]
 8001a96:	4b91      	ldr	r3, [pc, #580]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	4b8e      	ldr	r3, [pc, #568]	; (8001ce0 <HAL_RCC_OscConfig+0x4f8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d118      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab2:	4b8b      	ldr	r3, [pc, #556]	; (8001ce0 <HAL_RCC_OscConfig+0x4f8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a8a      	ldr	r2, [pc, #552]	; (8001ce0 <HAL_RCC_OscConfig+0x4f8>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001abe:	f7ff fadf 	bl	8001080 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac6:	f7ff fadb 	bl	8001080 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b64      	cmp	r3, #100	; 0x64
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0fd      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	4b81      	ldr	r3, [pc, #516]	; (8001ce0 <HAL_RCC_OscConfig+0x4f8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x312>
 8001aec:	4b7b      	ldr	r3, [pc, #492]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4a7a      	ldr	r2, [pc, #488]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6213      	str	r3, [r2, #32]
 8001af8:	e02d      	b.n	8001b56 <HAL_RCC_OscConfig+0x36e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x334>
 8001b02:	4b76      	ldr	r3, [pc, #472]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a75      	ldr	r2, [pc, #468]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	f023 0301 	bic.w	r3, r3, #1
 8001b0c:	6213      	str	r3, [r2, #32]
 8001b0e:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	4a72      	ldr	r2, [pc, #456]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	f023 0304 	bic.w	r3, r3, #4
 8001b18:	6213      	str	r3, [r2, #32]
 8001b1a:	e01c      	b.n	8001b56 <HAL_RCC_OscConfig+0x36e>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b05      	cmp	r3, #5
 8001b22:	d10c      	bne.n	8001b3e <HAL_RCC_OscConfig+0x356>
 8001b24:	4b6d      	ldr	r3, [pc, #436]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4a6c      	ldr	r2, [pc, #432]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	6213      	str	r3, [r2, #32]
 8001b30:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4a69      	ldr	r2, [pc, #420]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6213      	str	r3, [r2, #32]
 8001b3c:	e00b      	b.n	8001b56 <HAL_RCC_OscConfig+0x36e>
 8001b3e:	4b67      	ldr	r3, [pc, #412]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a66      	ldr	r2, [pc, #408]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	6213      	str	r3, [r2, #32]
 8001b4a:	4b64      	ldr	r3, [pc, #400]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a63      	ldr	r2, [pc, #396]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	f023 0304 	bic.w	r3, r3, #4
 8001b54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d015      	beq.n	8001b8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fa8f 	bl	8001080 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7ff fa8b 	bl	8001080 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e0ab      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7c:	4b57      	ldr	r3, [pc, #348]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0ee      	beq.n	8001b66 <HAL_RCC_OscConfig+0x37e>
 8001b88:	e014      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fa79 	bl	8001080 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b90:	e00a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b92:	f7ff fa75 	bl	8001080 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e095      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba8:	4b4c      	ldr	r3, [pc, #304]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1ee      	bne.n	8001b92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d105      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bba:	4b48      	ldr	r3, [pc, #288]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a47      	ldr	r2, [pc, #284]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 8081 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd0:	4b42      	ldr	r3, [pc, #264]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d061      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d146      	bne.n	8001c72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be4:	4b3f      	ldr	r3, [pc, #252]	; (8001ce4 <HAL_RCC_OscConfig+0x4fc>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7ff fa49 	bl	8001080 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7ff fa45 	bl	8001080 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e067      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c04:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c18:	d108      	bne.n	8001c2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c1a:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	492d      	ldr	r1, [pc, #180]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c2c:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a19      	ldr	r1, [r3, #32]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	4927      	ldr	r1, [pc, #156]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <HAL_RCC_OscConfig+0x4fc>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fa19 	bl	8001080 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c52:	f7ff fa15 	bl	8001080 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e037      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x46a>
 8001c70:	e02f      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c72:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <HAL_RCC_OscConfig+0x4fc>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fa02 	bl	8001080 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff f9fe 	bl	8001080 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e020      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x498>
 8001c9e:	e018      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e013      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d106      	bne.n	8001cce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40007000 	.word	0x40007000
 8001ce4:	42420060 	.word	0x42420060

08001ce8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0d0      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b6a      	ldr	r3, [pc, #424]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d910      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 0207 	bic.w	r2, r3, #7
 8001d12:	4965      	ldr	r1, [pc, #404]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b63      	ldr	r3, [pc, #396]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0b8      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d020      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d44:	4b59      	ldr	r3, [pc, #356]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4a58      	ldr	r2, [pc, #352]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d5c:	4b53      	ldr	r3, [pc, #332]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4a52      	ldr	r2, [pc, #328]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d68:	4b50      	ldr	r3, [pc, #320]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	494d      	ldr	r1, [pc, #308]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d040      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	4b47      	ldr	r3, [pc, #284]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d115      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e07f      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da6:	4b41      	ldr	r3, [pc, #260]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e073      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e06b      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc6:	4b39      	ldr	r3, [pc, #228]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f023 0203 	bic.w	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4936      	ldr	r1, [pc, #216]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd8:	f7ff f952 	bl	8001080 <HAL_GetTick>
 8001ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de0:	f7ff f94e 	bl	8001080 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e053      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 020c 	and.w	r2, r3, #12
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1eb      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d210      	bcs.n	8001e38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 0207 	bic.w	r2, r3, #7
 8001e1e:	4922      	ldr	r1, [pc, #136]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e032      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4916      	ldr	r1, [pc, #88]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	490e      	ldr	r1, [pc, #56]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e76:	f000 f821 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
 8001e8a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e8e:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <HAL_RCC_ClockConfig+0x1cc>)
 8001e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_RCC_ClockConfig+0x1d0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff f8b0 	bl	8000ffc <HAL_InitTick>

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40022000 	.word	0x40022000
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08002728 	.word	0x08002728
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	20000004 	.word	0x20000004

08001ebc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ebc:	b490      	push	{r4, r7}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ec4:	1d3c      	adds	r4, r7, #4
 8001ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ec8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ee6:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d002      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x40>
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x46>
 8001efa:	e02d      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001efe:	623b      	str	r3, [r7, #32]
      break;
 8001f00:	e02d      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	0c9b      	lsrs	r3, r3, #18
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f0e:	4413      	add	r3, r2
 8001f10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f14:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	0c5b      	lsrs	r3, r3, #17
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f2e:	4413      	add	r3, r2
 8001f30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f3a:	fb02 f203 	mul.w	r2, r2, r3
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
 8001f46:	e004      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	4a0c      	ldr	r2, [pc, #48]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	623b      	str	r3, [r7, #32]
      break;
 8001f56:	e002      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f5a:	623b      	str	r3, [r7, #32]
      break;
 8001f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3728      	adds	r7, #40	; 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc90      	pop	{r4, r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	08002714 	.word	0x08002714
 8001f70:	08002724 	.word	0x08002724
 8001f74:	40021000 	.word	0x40021000
 8001f78:	007a1200 	.word	0x007a1200
 8001f7c:	003d0900 	.word	0x003d0900

08001f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f84:	4b02      	ldr	r3, [pc, #8]	; (8001f90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	20000000 	.word	0x20000000

08001f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f98:	f7ff fff2 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001f9c:	4601      	mov	r1, r0
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	4a03      	ldr	r2, [pc, #12]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	08002738 	.word	0x08002738

08001fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fc0:	f7ff ffde 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fc4:	4601      	mov	r1, r0
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	0adb      	lsrs	r3, r3, #11
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	4a03      	ldr	r2, [pc, #12]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08002738 	.word	0x08002738

08001fe4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <RCC_Delay+0x34>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0a      	ldr	r2, [pc, #40]	; (800201c <RCC_Delay+0x38>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0a5b      	lsrs	r3, r3, #9
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002000:	bf00      	nop
  }
  while (Delay --);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1e5a      	subs	r2, r3, #1
 8002006:	60fa      	str	r2, [r7, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f9      	bne.n	8002000 <RCC_Delay+0x1c>
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000000 	.word	0x20000000
 800201c:	10624dd3 	.word	0x10624dd3

08002020 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e076      	b.n	8002120 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	2b00      	cmp	r3, #0
 8002038:	d108      	bne.n	800204c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002042:	d009      	beq.n	8002058 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]
 800204a:	e005      	b.n	8002058 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe fe66 	bl	8000d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800208e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020dc:	ea42 0103 	orr.w	r1, r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	0c1a      	lsrs	r2, r3, #16
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f002 0204 	and.w	r2, r2, #4
 80020fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	4613      	mov	r3, r2
 8002136:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_SPI_Transmit+0x22>
 8002146:	2302      	movs	r3, #2
 8002148:	e126      	b.n	8002398 <HAL_SPI_Transmit+0x270>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002152:	f7fe ff95 	bl	8001080 <HAL_GetTick>
 8002156:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b01      	cmp	r3, #1
 8002166:	d002      	beq.n	800216e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002168:	2302      	movs	r3, #2
 800216a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800216c:	e10b      	b.n	8002386 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <HAL_SPI_Transmit+0x52>
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800217e:	e102      	b.n	8002386 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2203      	movs	r2, #3
 8002184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	88fa      	ldrh	r2, [r7, #6]
 8002198:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	88fa      	ldrh	r2, [r7, #6]
 800219e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c6:	d10f      	bne.n	80021e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f2:	2b40      	cmp	r3, #64	; 0x40
 80021f4:	d007      	beq.n	8002206 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800220e:	d14b      	bne.n	80022a8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <HAL_SPI_Transmit+0xf6>
 8002218:	8afb      	ldrh	r3, [r7, #22]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d13e      	bne.n	800229c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	881a      	ldrh	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	1c9a      	adds	r2, r3, #2
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002242:	e02b      	b.n	800229c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b02      	cmp	r3, #2
 8002250:	d112      	bne.n	8002278 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	881a      	ldrh	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	1c9a      	adds	r2, r3, #2
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	86da      	strh	r2, [r3, #54]	; 0x36
 8002276:	e011      	b.n	800229c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002278:	f7fe ff02 	bl	8001080 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d803      	bhi.n	8002290 <HAL_SPI_Transmit+0x168>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228e:	d102      	bne.n	8002296 <HAL_SPI_Transmit+0x16e>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	77fb      	strb	r3, [r7, #31]
          goto error;
 800229a:	e074      	b.n	8002386 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1ce      	bne.n	8002244 <HAL_SPI_Transmit+0x11c>
 80022a6:	e04c      	b.n	8002342 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <HAL_SPI_Transmit+0x18e>
 80022b0:	8afb      	ldrh	r3, [r7, #22]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d140      	bne.n	8002338 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	330c      	adds	r3, #12
 80022c0:	7812      	ldrb	r2, [r2, #0]
 80022c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022dc:	e02c      	b.n	8002338 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d113      	bne.n	8002314 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	330c      	adds	r3, #12
 80022f6:	7812      	ldrb	r2, [r2, #0]
 80022f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	86da      	strh	r2, [r3, #54]	; 0x36
 8002312:	e011      	b.n	8002338 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002314:	f7fe feb4 	bl	8001080 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d803      	bhi.n	800232c <HAL_SPI_Transmit+0x204>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232a:	d102      	bne.n	8002332 <HAL_SPI_Transmit+0x20a>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002336:	e026      	b.n	8002386 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1cd      	bne.n	80022de <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	6839      	ldr	r1, [r7, #0]
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f8b2 	bl	80024b0 <SPI_EndRxTxTransaction>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10a      	bne.n	8002376 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	77fb      	strb	r3, [r7, #31]
 8002382:	e000      	b.n	8002386 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002384:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002396:	7ffb      	ldrb	r3, [r7, #31]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3720      	adds	r7, #32
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023b0:	f7fe fe66 	bl	8001080 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	4413      	add	r3, r2
 80023be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023c0:	f7fe fe5e 	bl	8001080 <HAL_GetTick>
 80023c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023c6:	4b39      	ldr	r3, [pc, #228]	; (80024ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	015b      	lsls	r3, r3, #5
 80023cc:	0d1b      	lsrs	r3, r3, #20
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023d6:	e054      	b.n	8002482 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023de:	d050      	beq.n	8002482 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023e0:	f7fe fe4e 	bl	8001080 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d902      	bls.n	80023f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d13d      	bne.n	8002472 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002404:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800240e:	d111      	bne.n	8002434 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002418:	d004      	beq.n	8002424 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002422:	d107      	bne.n	8002434 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002432:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243c:	d10f      	bne.n	800245e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800245c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e017      	b.n	80024a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3b01      	subs	r3, #1
 8002480:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4013      	ands	r3, r2
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	429a      	cmp	r2, r3
 8002490:	bf0c      	ite	eq
 8002492:	2301      	moveq	r3, #1
 8002494:	2300      	movne	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	429a      	cmp	r2, r3
 800249e:	d19b      	bne.n	80023d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3720      	adds	r7, #32
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000000 	.word	0x20000000

080024b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f7ff ff6a 	bl	80023a0 <SPI_WaitFlagStateUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f043 0220 	orr.w	r2, r3, #32
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e000      	b.n	80024e4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e03f      	b.n	800257e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe fcec 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2224      	movs	r2, #36	; 0x24
 800251c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800252e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f829 	bl	8002588 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025c2:	f023 030c 	bic.w	r3, r3, #12
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	430b      	orrs	r3, r1
 80025ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2c      	ldr	r2, [pc, #176]	; (800269c <UART_SetConfig+0x114>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d103      	bne.n	80025f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025f0:	f7ff fce4 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	e002      	b.n	80025fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025f8:	f7ff fccc 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 80025fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	009a      	lsls	r2, r3, #2
 8002608:	441a      	add	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	fbb2 f3f3 	udiv	r3, r2, r3
 8002614:	4a22      	ldr	r2, [pc, #136]	; (80026a0 <UART_SetConfig+0x118>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	0119      	lsls	r1, r3, #4
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	009a      	lsls	r2, r3, #2
 8002628:	441a      	add	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	fbb2 f2f3 	udiv	r2, r2, r3
 8002634:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <UART_SetConfig+0x118>)
 8002636:	fba3 0302 	umull	r0, r3, r3, r2
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2064      	movs	r0, #100	; 0x64
 800263e:	fb00 f303 	mul.w	r3, r0, r3
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	3332      	adds	r3, #50	; 0x32
 8002648:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <UART_SetConfig+0x118>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002654:	4419      	add	r1, r3
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	009a      	lsls	r2, r3, #2
 8002660:	441a      	add	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fbb2 f2f3 	udiv	r2, r2, r3
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <UART_SetConfig+0x118>)
 800266e:	fba3 0302 	umull	r0, r3, r3, r2
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2064      	movs	r0, #100	; 0x64
 8002676:	fb00 f303 	mul.w	r3, r0, r3
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	3332      	adds	r3, #50	; 0x32
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <UART_SetConfig+0x118>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	f003 020f 	and.w	r2, r3, #15
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	440a      	add	r2, r1
 8002692:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40013800 	.word	0x40013800
 80026a0:	51eb851f 	.word	0x51eb851f

080026a4 <__libc_init_array>:
 80026a4:	b570      	push	{r4, r5, r6, lr}
 80026a6:	2500      	movs	r5, #0
 80026a8:	4e0c      	ldr	r6, [pc, #48]	; (80026dc <__libc_init_array+0x38>)
 80026aa:	4c0d      	ldr	r4, [pc, #52]	; (80026e0 <__libc_init_array+0x3c>)
 80026ac:	1ba4      	subs	r4, r4, r6
 80026ae:	10a4      	asrs	r4, r4, #2
 80026b0:	42a5      	cmp	r5, r4
 80026b2:	d109      	bne.n	80026c8 <__libc_init_array+0x24>
 80026b4:	f000 f822 	bl	80026fc <_init>
 80026b8:	2500      	movs	r5, #0
 80026ba:	4e0a      	ldr	r6, [pc, #40]	; (80026e4 <__libc_init_array+0x40>)
 80026bc:	4c0a      	ldr	r4, [pc, #40]	; (80026e8 <__libc_init_array+0x44>)
 80026be:	1ba4      	subs	r4, r4, r6
 80026c0:	10a4      	asrs	r4, r4, #2
 80026c2:	42a5      	cmp	r5, r4
 80026c4:	d105      	bne.n	80026d2 <__libc_init_array+0x2e>
 80026c6:	bd70      	pop	{r4, r5, r6, pc}
 80026c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026cc:	4798      	blx	r3
 80026ce:	3501      	adds	r5, #1
 80026d0:	e7ee      	b.n	80026b0 <__libc_init_array+0xc>
 80026d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026d6:	4798      	blx	r3
 80026d8:	3501      	adds	r5, #1
 80026da:	e7f2      	b.n	80026c2 <__libc_init_array+0x1e>
 80026dc:	08002740 	.word	0x08002740
 80026e0:	08002740 	.word	0x08002740
 80026e4:	08002740 	.word	0x08002740
 80026e8:	08002744 	.word	0x08002744

080026ec <memset>:
 80026ec:	4603      	mov	r3, r0
 80026ee:	4402      	add	r2, r0
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d100      	bne.n	80026f6 <memset+0xa>
 80026f4:	4770      	bx	lr
 80026f6:	f803 1b01 	strb.w	r1, [r3], #1
 80026fa:	e7f9      	b.n	80026f0 <memset+0x4>

080026fc <_init>:
 80026fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fe:	bf00      	nop
 8002700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002702:	bc08      	pop	{r3}
 8002704:	469e      	mov	lr, r3
 8002706:	4770      	bx	lr

08002708 <_fini>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	bf00      	nop
 800270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270e:	bc08      	pop	{r3}
 8002710:	469e      	mov	lr, r3
 8002712:	4770      	bx	lr
